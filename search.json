[{"path":"https://henriksson-lab.github.io/zorn/articles/alignment.html","id":"alignment","dir":"Articles","previous_headings":"","what":"Alignment","title":"Alignment-based workflow","text":"use BWA alignment, wants data FASTQ format. assume use single-cell WGS chemistry produces paired reads, direct Zorn produce R1/R2 FASTQ files (R1 specified). name output Bascets “asfq”, taking input typical sharded reads: (SLURM-compatible step) alignment, need prepare reference indexing . can using “bwa index” terminal; can also via Zorn. assumes FASTA-file named .fa (can also gzipped): (SLURM-compatible step) can now proceed alignment using BWA. default, command outputs unsorted sorted BAM-files. sorted BAM-files required counting reads genomic regions, .e., WGS species counting RNA-seq unsorted BAM-files required filtering host reads (SLURM-compatible step) TODO: Filtering","code":"### Get reads in fastq format BascetMapTransform(   bascetRoot,   inputName=\"filtered\",   #default; can omit   outputName=\"asfq\",  ###name parameter   out_format=\"R1.fq.gz\" ) #Build a reference BascetIndexGenomeBWA(   bascetRoot,   \"/your_reference/all.fa\" ) ### Perform alignment BascetAlignToReference(   bascetRoot,   useReference=\"/your_reference/all.fa\",   numLocalThreads=10 )"},{"path":"https://henriksson-lab.github.io/zorn/articles/alignment.html","id":"host-filtering-workflow","dir":"Articles","previous_headings":"","what":"Host filtering workflow","title":"Alignment-based workflow","text":"","code":"BascetFilterAlignment(   bascetRoot,   outputName=\"filter_paired\",   keep_mapped=TRUE )"},{"path":"https://henriksson-lab.github.io/zorn/articles/alignment.html","id":"option-1-counting-with-signac","dir":"Articles","previous_headings":"","what":"Option #1: Counting with Signac","title":"Alignment-based workflow","text":"want analyze reads mapped, either RNA-seq counting genes, generally, count within genomic region, can use Signac great flexibility task. Signac designed analyze single-cell ATAC-seq data, reads stored specialized BED-file. can use command generate file. Note one caveat: depending chemistry, workflow may handle UMIs, just report raw read counts. However, quick dirty operations typically enough. (SLURM-compatible step)","code":"### Generate fragments BED file suited for quantifying ### reads/chromosome using Signac later  BascetBam2Fragments(   bascetRoot )"},{"path":"https://henriksson-lab.github.io/zorn/articles/alignment.html","id":"option-2-counting-chromosomes-species","dir":"Articles","previous_headings":"","what":"Option #2: Counting chromosomes (species)","title":"Alignment-based workflow","text":"simplified scenario just want get number reads per chromosome. counts can later summarized levels genomes (summing across chromosomes). use example compare alignment expected mock community, thus just want see species mix together. following command generates counts files: (SLURM-compatible step) output format one binary HDF5 file shard, roughly Anndata file format. load , use following command loads files concatenates single matrix. can loaded Seurat: likely, cells discarded. Initially recommend keep cutoff low better informed. can apply cutoff follows: list chromosomes belong together, can furthermore sum get species-level counts. mapSeq2strain contain two columns: (todo) (TODO filter instead) Knowing species, can generate per-species kneeplot follows: can now proceed generate dimensional reduction form UMAP. See tutorials Seurat Signac details. summarize required command , can apply either RNA-seq ATAC-seq dimensional reduction depending think appropriate. Finally, can plot UMAP. also extracted dominant species column matrix, can visualize top!","code":"### Count reads per chromosome BascetCountChrom(   bascetRoot ) library(Seurat)  cnt <- ReadBascetCountMatrix(bascetRoot,\"chromcount\", verbose=FALSE)  adata <- CreateSeuratObject(   counts = CreateAssayObject(t(cnt$X)), ## according to anndata standard, there should be a transpose here   assay = \"chrom_cnt\" ) keep_cells <- adata$nCount_chrom_cnt > 10000 #10k reads sum(keep_cells)                              #See how many cells pass this cutoff adata <- adata[,keep_cells]                  #Reduce to sensible number adata[[\"species_cnt\"]] <- ChromToSpeciesCount(adata, mapSeq2strain)    #Optional: Figure out which species has most reads in which cell cnt <- adata@assays$species_cnt$counts adata$species_aln <- rownames(cnt)[apply(cnt, 2, which.max)] DefaultAssay(adata) <- \"species_cnt\" KneeplotPerSpecies(adata) if(FALSE){   #ATAC-seq style analysis   library(Signac)   adata <- RunTFIDF(adata)   adata <- FindTopFeatures(adata, min.cutoff = 'q0')   adata <- RunSVD(adata)   DepthCor(adata)   adata <- RunUMAP(object = adata, reduction = 'lsi', dims = 1:(nrow(adata)-1), reduction.name = \"chrom_umap\")   } else {   #RNA-seq style analysis   adata <- NormalizeData(adata)   adata <- FindVariableFeatures(adata, selection.method = \"vst\", nfeatures = nrow(adata))   adata <- ScaleData(adata, features = rownames(adata))   adata <- RunPCA(adata, features = VariableFeatures(object = adata))   adata <- RunUMAP(adata, dims = 1:(nrow(adata)-1), reduction.name = \"chrom_umap\") } DimPlot(object = adata, label = TRUE, group.by = \"species_aln\") +    xlab(\"BWA1\") +    ylab(\"BWA2\")"},{"path":"https://henriksson-lab.github.io/zorn/articles/alignment.html","id":"option-3-rna-seq-analysis-feature-counting","dir":"Articles","previous_headings":"","what":"Option #3: RNA-seq analysis (feature counting)","title":"Alignment-based workflow","text":"protocols RNA-seq, aim get number reads per gene, per cell. alignment sorting reads based genome coordinate (default setting), can overlay reads gene coordinates GTF GFF file (supported). following command performs operation: ID name genes extracted GFF attributes column. files name ID; ID used name nothing specified. default, rows “gene” feature description features (genes) counted, can load Seurat: , can follow RNA-seq tutorial Seurat. impatient, minimal example code get first UMAP:","code":"BascetCountFeature(   bascetRoot,   gffFile = \"/my/genome.gtf.gz\",   useFeature = \"gene\",     #Default   attrGeneId = \"gene_id\",  #Default   attrGeneName = \"name\"    #Default ) library(Seurat)  cnt <- ReadBascetCountMatrix(bascetRoot,\"featurecount\", verbose=FALSE)  adata <- CreateSeuratObject(   counts = CreateAssayObject(t(cnt$X)) ## according to anndata standard, there should be a transpose here ) adata <- NormalizeData(adata) adata <- FindVariableFeatures(adata, selection.method = \"vst\") adata <- ScaleData(adata) adata <- RunPCA(adata, features = VariableFeatures(object = adata))  adata <- FindNeighbors(adata, dims = 1:20) adata <- FindClusters(adata, resolution = 0.5)  adata <- RunUMAP(adata, dims=1:10)"},{"path":"https://henriksson-lab.github.io/zorn/articles/countsketch.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"Count sketch KMER-based workflow","text":"Next, produce count sketch cell. options wish alter number dimensions. can reduce number dimensions later R, need memory procedure. (SLURM-compatible step) results Bascet-ZIP count sketches. Turn count matrix file using following command: (SLURM-compatible step)","code":"#Internally wraps mapcell to compute count sketches for each cell BascetComputeCountSketch(   bascetRoot ) #Gather count sketches into a single matrix file BascetGatherCountSketch(   bascetRoot )"},{"path":"https://henriksson-lab.github.io/zorn/articles/countsketch.html","id":"postprocessing-with-signacseurat","dir":"Articles","previous_headings":"","what":"Postprocessing with Signac/Seurat","title":"Count sketch KMER-based workflow","text":"can now load data R Seurat object: data rather large; recommend enabling multithreading Seurat: Note data loaded directly reduction, rather regular counts. counts little meaning , makes little sense perform PCA, SVD similar data. Rather, recommend using dimensions. following produces UMAP, setting dimension available dimensions reduction: result can visualized: recommend integrate object output KRAKEN2 get clue clusters mean.","code":"adata <- BascetLoadCountSketchMatrix(   bascetRoot ) library(future) plan(\"multicore\", workers = 10) reduction_name <- \"kmersketch\" adata <- RunUMAP(   adata,   dims = 1:ncol(adata@reductions[[reduction_name]]@cell.embeddings),   reduction = reduction_name,   metric = \"cosine\" ) DimPlot(adata)"},{"path":"https://henriksson-lab.github.io/zorn/articles/debarcoding.html","id":"additional-trimming","dir":"Articles","previous_headings":"","what":"Additional trimming","title":"Debarcoding and sharding","text":"Bascet rudimentary trimming. recommend trimming reads . , first convert data FASTQ format: Now use FASTP perform trimming: plan perform alignment, resulting fastp FASTQ files can used input (don’t forget specify inputName=“fastp”!). want instead get TIRP file, can convert back: now TIRP file , equivalent first shardified output. Don’t forget specify inputName=“new_filtered” later commands, default use “filtered”","code":"### Get reads in fastq format BascetMapTransform(   bascetRoot,   inputName=\"filtered\",   #default; can omit   outputName=\"asfq\",   out_format=\"R1.fq.gz\" ) ### Get reads in fastq format for BWA BascetRunFASTP(   bascetRoot,   numLocalThreads=10,   inputName=\"asfq\",   outputName=\"fastp\" ) BascetMapTransform(   bascetRoot,   \"fastp\",   \"new_filtered\",   out_format=\"tirp.gz\" )"},{"path":"https://henriksson-lab.github.io/zorn/articles/debarcoding.html","id":"onward","dir":"Articles","previous_headings":"","what":"Onward","title":"Debarcoding and sharding","text":"make passed one heaviest critical steps workflow! proceed depends use case. single-cell metagenomics sample unknown composition recommend KRAKEN2 workflow next.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/example_data.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated data","title":"Example data","text":"test pipeline, prepared several simulated datasets can use","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/example_data.html","id":"full-simulation-small","dir":"Articles","previous_headings":"Simulated data","what":"Full simulation (small)","title":"Example data","text":"test full pipeline, prepared simulated raw FASTQ files (R1)[http://beagle.henlab.org/public/bascet/sim3/sim3_R1_001.fastq.gz] (R2)[http://beagle.henlab.org/public/bascet/sim3/sim3_R2_001.fastq.gz]","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/example_data.html","id":"debarcoded-simulation-small","dir":"Articles","previous_headings":"Simulated data","what":"Debarcoded simulation (small)","title":"Example data","text":"can use (shardified reads)[http://beagle.henlab.org/public/bascet/demodata/simulated.zip] input. cells, different depth. smallest demo dataset. Skip debarcoding shardification use data","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/example_data.html","id":"more-simulate-data","dir":"Articles","previous_headings":"","what":"More simulate data","title":"Example data","text":"can also simulate data, , e.g., check performance genomes might expect sample. can useful power calculations/estimation. See Zorn github repo. Note simulation scripts developers primarily, likely rough corners. Please get touch need need directions use code.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/example_data.html","id":"real-data-small","dir":"Articles","previous_headings":"","what":"Real data (small)","title":"Example data","text":"can also investigate (miseq data)[http://beagle.henlab.org/public/bascet/demodata/miseq.zip]. Note data ultra-shallowly sequenced, don’t expect see much. great number barcodes stress test parts Zorn/Bascet without need large computational cluster.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/faq.html","id":"if-your-questions-is-not-here","dir":"Articles","previous_headings":"","what":"If your questions is not here","title":"Frequently Asked Questions","text":"Please email us questions ’ll best help. Either email Johan Henriksson Laura Carroll","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/faq.html","id":"can-you-help-me-wrap-tool-x","dir":"Articles","previous_headings":"","what":"Can you help me wrap tool X?","title":"Frequently Asked Questions","text":"Contact us; commonly used tool effort low, might able rather quickly get . major endeavor, might possible task collaboration.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/faq.html","id":"how-do-i-contribute","dir":"Articles","previous_headings":"","what":"How do I contribute?","title":"Frequently Asked Questions","text":"’s ton tasks happy get help . Depending task, might enough just know R BASH; difficult tasks requires learn Rust, case helps least written Python (even better; Java, C# C++). examples tasks: Wrapping commonly used tools Improved read trimming / support trimmers Improved barcode detection Support assemblers Support single-cell chemistries General speed improvements","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/faq.html","id":"who-was-zorn","dir":"Articles","previous_headings":"","what":"Who was Zorn?","title":"Frequently Asked Questions","text":"See Anders Zorn wikipedia!","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-tirp--tirp-gz","dir":"Articles","previous_headings":"","what":"Bascet-TIRP (.tirp.gz)","title":"Overview of File formats","text":"TIRP (Tabix-indexed read pairs) bgzip’ed text file following columns, separated tab: Name cell 1 (start position tabix format; ignored) 1 (end position tabix format; ignored) R1 sequence R2 sequence R1 quality score R2 quality score UMI exception right debarcoding, TIRPs always sorted name cell. indexed using tabix. means can retrieve list cells file using tabix tool, advise use higher level wrappers Zorn/Bascet get locked file format. optional read count histogram can stored file: xxx.tirp.gz.hist","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-zip--zip","dir":"Articles","previous_headings":"","what":"Bascet-ZIP (.zip)","title":"Overview of File formats","text":"use zip files means storing general data. conventions: File Y cell XX stored XX/Y cells reads, stored XX/r1.fq XX/r2.fq cell contigs, stored XX/contigs.fa file XX/_mapcell.log output mapcell script Overall, files named XX/YY reserved special output future tools. Thus avoid storing files starting  name","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-fastq--r1-fq-gz-and--r2-fq-gz","dir":"Articles","previous_headings":"","what":"Bascet-FASTQ (.R1.fq.gz and .R2.fq.gz)","title":"Overview of File formats","text":"tools require FASTQ input output. keep track cell origin reads, reads special naming convention: “BASCET_” cellID “:” UMI “:” read_number “:” read_index * cellID name cell. FASTQ supports characters, names mangled future (implemented) * UMI unique molecular identifier * read_number just number, number R1 R2. can used track read correspondence reads filtered, multimapped etc. * read_index 1 2, R1 R2 Reads Bascet-FASTQ typically sorted cellID, read_number read_index, order. makes easy read reads one cell without scan entire file.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-bam--bam","dir":"Articles","previous_headings":"","what":"Bascet-BAM (.bam)","title":"Overview of File formats","text":"keep track cellular origin, reads BAM files typically follow naming convention Bascet-FASTQ. Thus, running aligner Bascet-FASTQ result valid Bascet-BAM. support tools, reads may also annotated using tags. read names named according FASTQ scheme, .e, start “BASCET_”, tools must instead scan tags: @CB:Z:…. cell_ID @UB:Z….. UMI similar CellRanger annotation (https://www.10xgenomics.com/support/software/cell-ranger/7.2/analysis/outputs/cr-outputs-bam), except Bascet tags yet---corrected cell IDs UMIs.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-kraken5--kraken5","dir":"Articles","previous_headings":"","what":"Bascet-KRAKEN5 (.kraken5)","title":"Overview of File formats","text":"sparse matrix HDF5 file, aimed store counts KRAKEN2. KRAKEN2 outputs taxonomy IDs (starting 0), used column indices matrix format. details follow","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/fileformats.html","id":"bascet-hdf5--hd5","dir":"Articles","previous_headings":"","what":"Bascet-HDF5 (.hd5)","title":"Overview of File formats","text":"format loosely implements Anndata count matrix format (https://anndata.readthedocs.io). accommodate needs store types data, files likely deviate standard future. Thus, expect able load regular anndata-compatible software. details follow","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/for_developers.html","id":"compiling-bascet","dir":"Articles","previous_headings":"","what":"Compiling Bascet","title":"Installation","text":"Bascet located separate Github repository first need download rust download Bascet get Rust dependencies: compile Bascet, just run “make” whenever make change:","code":"git clone https://github.com/henriksson-lab/bascet.git    #or: git clone git@github.com:henriksson-lab/bascet.git     cd bascet make install_rust  #this will install rust nightly build -- only need to do this once cd bascet make"},{"path":"https://henriksson-lab.github.io/zorn/articles/for_developers.html","id":"editing-the-bascet-code","dir":"Articles","previous_headings":"","what":"Editing the Bascet code","title":"Installation","text":"modify code, recommend VSCode particular, install rust code extensions. setup enables see compile errors get hints coding!","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/for_developers.html","id":"accessing-a-locally-compiled-bascet-in-zorn","dir":"Articles","previous_headings":"","what":"Accessing a locally compiled Bascet in Zorn","title":"Installation","text":"can link Rust binary: want access software Docker/Singularity, can also pass image; Bascet present, providing absolute path like override .","code":"bascetInstance.default <- BascetInstance(   bin=\"/path/to/bascet/target/debug/bascet\",   tempdir=\"./\" )"},{"path":"https://henriksson-lab.github.io/zorn/articles/genome_annotation.html","id":"quast","dir":"Articles","previous_headings":"","what":"QUAST","title":"Genome annotation tools","text":"First run QUAST cells: (SLURM-compatible step) aggregate results visualization. example caches result speed reloading; optional","code":"BascetMapCell(   bascetRoot,   withfunction = \"_quast\",   inputName = \"skesa\",  #or other source of contigs   outputName = \"quast\" ) quast_aggr <- BascetCacheComputation(bascetRoot,\"cache_quast\",MapListAsDataFrame(BascetAggregateMap(   bascetRoot,   \"quast\",   aggr.quast )))"},{"path":"https://henriksson-lab.github.io/zorn/articles/genome_annotation.html","id":"abricate","dir":"Articles","previous_headings":"","what":"Abricate","title":"Genome annotation tools","text":"First run Abricate cells. NCBI database used default. See ListDatabaseAbricate() list databases (SLURM-compatible step) aggregate results visualization. example caches result speed reloading; optional","code":"BascetMapCellAbricate(   bascetRoot,   inputName = \"skesa\"  #or other source of contigs ) quast_aggr <- BascetCacheComputation(bascetRoot,\"cache_abricate\",MapListAsDataFrame(BascetAggregateMap(   bascetRoot,   \"abricate\",   aggr.abricate )))"},{"path":"https://henriksson-lab.github.io/zorn/articles/genome_annotation.html","id":"bakta","dir":"Articles","previous_headings":"","what":"Bakta","title":"Genome annotation tools","text":"First download database: can run run Bakta cells: (SLURM-compatible step) aggregate results visualization. example caches result speed reloading; optional","code":"DownloadDatabaseBakta(   dbdir=\"~/bakta\",  #create directory before running command   dbtype=\"light\" ) ### .... BascetMapCellBakta(   bascetRoot,   db = \"~/bakta\",   inputName = \"skesa\",  #or other source of contigs ) quast_aggr <- BascetCacheComputation(bascetRoot,\"cache_bakta\",MapListAsDataFrame(BascetAggregateMap(   bascetRoot,   \"bakta\",   aggr.bakta )))"},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"step-1-install-zorn","dir":"Articles","previous_headings":"","what":"Step 1: Install Zorn","title":"Installation","text":"Zorn active development, just get straight GitHub install source: can load :","code":"if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"henriksson-lab/zorn\") library(Zorn)"},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"step-2-install-bascet","dir":"Articles","previous_headings":"","what":"Step 2: Install Bascet","title":"Installation","text":"also need Bascet, command-line suite single-cell analysis. users find easiest run Bascet Singularity Docker; instructions described . Singularity Linux users, OSX Windows users use Docker.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"install-bascet-via-singularity-linux-only","dir":"Articles","previous_headings":"Step 2: Install Bascet","what":"Install Bascet via Singularity (Linux only)","title":"Installation","text":"First install Singularity. Note one possibly annoying default setting! read Bascet files file systems, invisible Bascet. avoid , edit /etc/singularity/singularity.conf : installed, Zorn can pull latest Singularity image . recommend keeping separate directory workspace, multiple workspaces can share image","code":"mount hostfs = yes bascetInstance.default <- getBascetSingularityImage(storeAt=\"/somewhere/on/your/disk/\")"},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"install-bascet-via-docker-singularity-is-recommended-for-linux","dir":"Articles","previous_headings":"Step 2: Install Bascet","what":"Install Bascet via Docker (Singularity is recommended for Linux)","title":"Installation","text":"First install Docker. installed, Zorn can pull latest Docker image . recommend keeping separate directory workspace, multiple workspaces can share image","code":"bascetInstance.default <- getBascetDockerImage(storeAt=\"/somewhere/on/your/disk/\")"},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"step-3-test-the-installation","dir":"Articles","previous_headings":"","what":"Step 3: Test the installation","title":"Installation","text":"Run following see get “ok” proceeding:","code":"TestBascetInstance(bascetInstance.default)"},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"using-the-bascet-instance","dir":"Articles","previous_headings":"","what":"Using the Bascet instance","title":"Installation","text":"need pass bascet_inst variable Zorn command requires . singularity image cached, run , instead use previous image. need delete manually wish replace .","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/install.html","id":"for-developers-accessing-a-locally-compiled-bascet","dir":"Articles","previous_headings":"","what":"For developers: Accessing a locally compiled Bascet","title":"Installation","text":"See Bascet Developers","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/isolates.html","id":"if-you-have-a-few-input-fastq-or-fasta-files","dir":"Articles","previous_headings":"","what":"If you have a few input FASTQ or FASTA files","title":"Isolate analysis","text":"two special file formats, “list-fastq” “list-fasta”, TSV simply consists * name sample * Links raw FASTQ-files FASTA-files file can used place Bascet TIRP ZIP-file, e.g., source filtered reads. effect, skip debarcoding sharding. TODO file format example","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/isolates.html","id":"if-you-have-really-many-fastafastq-files","dir":"Articles","previous_headings":"","what":"If you have really many FASTA/FASTQ files","title":"Isolate analysis","text":"case recommend produce TIRP files , way makes sense based infrastructure. See section file formats learn produce . can easily append one input file another, thus avoid need keep files disk time.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/isolates.html","id":"mixing-single-cell-and-bulk-samples","dir":"Articles","previous_headings":"","what":"Mixing single-cell and bulk samples","title":"Isolate analysis","text":"Bascet currently support multiple input file formats given stage; .e. filtered reads, must TIRP format, another format. easiest way mix samples 1. Perform debarcoding sharding single-cell data TIRP 2. separate working directory bulk data, use Bascet transform convert list-FASTQ/FASTA TIRP 3. Copy bulk TIRP filtered.xxx.tirp.gz single-cell directory, xxx next number current single-cell shards","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/kmer.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"Informative KMER-based workflow","text":"extract informative KMERs, first need obtain list . Bascet/Zorn offers one way, first extract minhashes cell. finger prints later can look cells. (SLURM-compatible step) two cells species shallowly sequenced, may share minhashes, simply reads don’t span genomes. can however look KMERs frequently shared counting minhashes across cells, generating histogram. open problem KMERs pick. KMERs low abundance help clustering much UMAP algorithm find many cells correlated . Likewise, KMERs present cell informative either. practice, don’t see happening; just picking common top 10,000 KMERs seems give useful results. can also pick KMERs based cutoff: Using list KMERs, can now re-scan genomes presence. (SLURM-compatible step) output format one binary HDF5 file shard, roughly Anndata file format. load , use following command loads files concatenates single matrix. can loaded Seurat: likely filter low abundant cells. Note workflow, cutoff based number KMERs rather number reads. can now proceed generate dimensional reduction form UMAP. See tutorials Seurat Signac details. summarize required command , can apply either RNA-seq ATAC-seq dimensional reduction depending think appropriate. can now plot UMAP cells. Note cells labels. One way obtain labels also running KRAKEN-based workflow; can use annotation tools mapcell-system.","code":"### Compute minhashes for each cell BascetComputeMinhash(   bascetRoot )  ### Gather minhashes into a single histogram BascetMakeMinhashHistogram(   bascetRoot ) kmerHist <- BascetReadMinhashHistogram(bascetRoot)  kmerHist$rank <- 1:nrow(kmerHist) ggplot(kmerHist[kmerHist$cnt>2,], aes(rank, cnt)) +   geom_point() +   scale_x_log10() +   scale_y_log10() ### Pick KMERs useKMERs <- kmerHist$kmer[kmerHist$cnt>5]  #Pick KMERs present in more than 5 cells ### Build count table by looking up selected KMERs in per-cell KMER databases BascetQueryFq(   bascetRoot,   useKMERs=useKMERs ) library(Seurat) ### Read count matrix cnt <- ReadBascetCountMatrix(   bascetRoot,   \"kmer_counts\"   #TODO note that the is a maximum count by default ) ## Load subset of real cells   keep_cells <- rowSums(cnt)>20000 #this cutoff is based on the number of KMERs, not read count!   sum(keep_cells)   adata <- CreateSeuratObject(     counts = CreateAssayObject(t(cnt[keep_cells,])),  #note that t() is needed     assay = \"infokmer\"   ) if(TRUE){   #ATAC-seq style analysis   library(Signac)   adata <- RunTFIDF(adata)   adata <- FindTopFeatures(adata, min.cutoff = 'q0')   adata <- RunSVD(adata)   DepthCor(adata)   adata <- RunUMAP(object = adata, reduction = 'lsi', dims = 1:30, reduction.name = \"infokmers_umap\")   } else {   #RNA-seq style analysis   adata <- NormalizeData(adata)   adata <- FindVariableFeatures(adata, selection.method = \"vst\", nfeatures = 2000)   adata <- ScaleData(adata, features = rownames(adata))   adata <- RunPCA(adata, features = VariableFeatures(object = adata))   adata <- RunUMAP(adata, dims = 1:20, reduction.name = \"infokmers_umap\") } DimPlot(object = adata, reduction = \"infokmers_umap\") +    xlab(\"KMER1\") +    ylab(\"KMER2\")"},{"path":"https://henriksson-lab.github.io/zorn/articles/kraken.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"KRAKEN2 ","text":"KRAKEN2 wants data FASTQ format. assume use single-cell WGS chemistry produces paired reads, direct Zorn produce R1/R2 FASTQ files (R1 specified). name output Bascets “asfq”, taking input typical sharded reads: (SLURM-compatible step) run KRAKEN2, need database. can get : https://benlangmead.github.io/aws-indexes/k2 want small one consider standard-8. Unzip directory. can run KRAKEN2 like : (SLURM-compatible step) Note two steps . First KRAKEN2 classifies read taxonomy. second step, count taxonomic reads cell. ends rather small matrix can process using Seurat.","code":"### Get reads in fastq format BascetMapTransform(   bascetRoot,   \"filtered\",   #default; can omit   \"asfq\",  ###name parameter   out_format=\"R1.fq.gz\" ) ### Run Kraken on each cell BascetRunKraken(   bascetRoot,   useKrakenDB=\"/your_disk/kraken/standard-8\",   numLocalThreads=20 )  ### Produce a count matrix of taxonomy features BascetMakeKrakenCountMatrix(   bascetRoot,   numLocalThreads=20 )"},{"path":"https://henriksson-lab.github.io/zorn/articles/kraken.html","id":"postprocessing-with-signacseurat","dir":"Articles","previous_headings":"","what":"Postprocessing with Signac/Seurat","title":"KRAKEN2 ","text":"output format one binary HDF5 file shard, roughly Anndata file format. load , use following command loads files concatenates single matrix. can loaded Seurat: likely want know cell species. Zorn can annotate species simply picking dominant species, phylum group cell: need filter low-abundance cells. , first investigate kneeplot species. different species differently hard lyse, likely different kneeplot patterns. can proceed filter cells reads. Note cutoff induce biases cells different DNA content; best way handle open research question (e.g. also consider different cutoffs different species). however basic filtering can perform: can now proceed generate dimensional reduction form UMAP. See tutorials Seurat Signac details. summarize required command , can apply either RNA-seq ATAC-seq dimensional reduction depending think appropriate. can now plot UMAP cells! colored genus, can also try levels annotation:","code":"mat <- ReadBascetCountMatrix(bascetRoot,\"kraken\", verbose=FALSE)  taxid_ob <- CreateAssayObject(t(mat)) #t() needed to conform from anndata to seurat adata <- CreateSeuratObject(counts = taxid_ob, project = \"proj\", min.cells = 0, min.features = 0) ## Look up taxonomy consensus data given taxonomyID counts for each cell kraken_taxid <- KrakenFindConsensusTaxonomy(mat)  ## Add KRAKEN consensus taxonomy to metadata rownames(kraken_taxid) <- kraken_taxid$cell_id kraken_taxid <- kraken_taxid[colnames(adata),c(\"taxid\",\"phylum\",\"class\",\"order\",\"family\",\"genus\",\"species\")] adata@meta.data <- cbind(   adata@meta.data,   kraken_taxid[colnames(adata),c(\"taxid\",\"phylum\",\"class\",\"order\",\"family\",\"genus\",\"species\")] ) KrakenKneePlot(adata, groupby = \"phylum\", showNumSpecies=showNumSpecies) keep_cells <- adata$nCount_RNA > 10000 #10k reads sum(keep_cells) adata <- adata[,keep_cells] if(TRUE){   #ATAC-seq style analysis   library(Signac)   adata <- RunTFIDF(adata)   adata <- FindTopFeatures(adata, min.cutoff = 'q0')   adata <- RunSVD(adata)   DepthCor(adata)   adata <- RunUMAP(object = adata, reduction = 'lsi', dims = 1:30, reduction.name = \"kraken_umap\")   } else {   #RNA-seq style analysis   adata <- NormalizeData(adata)   adata <- FindVariableFeatures(adata, selection.method = \"vst\", nfeatures = 2000)   adata <- ScaleData(adata, features = rownames(adata))   adata <- RunPCA(adata, features = VariableFeatures(object = adata))   adata <- RunUMAP(adata, dims = 1:20, reduction.name = \"kraken_umap\") } DimPlot(object = adata, label = TRUE, group.by = \"genus\", reduction = \"kraken_umap\") +    NoLegend() +    xlab(\"KRAKEN1\") +    ylab(\"KRAKEN2\")"},{"path":"https://henriksson-lab.github.io/zorn/articles/map_scripts.html","id":"running-a-map-function","dir":"Articles","previous_headings":"","what":"Running a MAP function","title":"Map scripts","text":"Zorn/Bascet designed let run kinds software operates cells. can either raw reads, contigs, data produce. operations can computationally intense, happens MAP framework. example invoking built-QUAST script produce quality metrics assembled genome: (SLURM-compatible step)","code":"BascetMapCell(   bascetRoot,   withfunction = \"_quast\",   inputName = \"skesa\",   outputName = \"quast\" )"},{"path":"https://henriksson-lab.github.io/zorn/articles/map_scripts.html","id":"aggregating-map-results","dir":"Articles","previous_headings":"","what":"Aggregating MAP results","title":"Map scripts","text":"run map function, likely want load results R. call procedure “aggregate”. case QUAST, procedure loads quality metrics R data.frame object:","code":"quast_aggr <- MapListAsDataFrame(BascetAggregateMap(   bascetRoot,   inputName=\"quast\",   aggr.quast ))"},{"path":"https://henriksson-lab.github.io/zorn/articles/map_scripts.html","id":"arguments-to-map-functions","dir":"Articles","previous_headings":"","what":"Arguments to MAP functions","title":"Map scripts","text":"scripts require additional arguments sent (link database file). done setting args argument. set two environment variables contents can picked script:","code":"BascetMapCell(   ...   args(DB=\"some/path\",OTHERARG=\"hi\")   ... )"},{"path":"https://henriksson-lab.github.io/zorn/articles/map_scripts.html","id":"custom-map-functions---introduction","dir":"Articles","previous_headings":"","what":"Custom MAP functions - introduction","title":"Map scripts","text":"easy add new functions! Easiest way simply copy modify code existing script. can start either * QUAST, takes contigs input * SKESA, takes FASTQ input written script, invoke direct path: cases want write aggregate function. function take output tool, parse , put sensible R object. look example existing aggregate functions inspiration. also catch-aggregate function requires bit special way calling. example takes “.txt”, generated tool, stores raw file content list. pretty may help debugging development:","code":"BascetMapCell(   bascetRoot,   withfunction = \"/path/to/your/script.sh\",   inputName = \"...\",   outputName = \"...\" ) quast_aggr <- MapListAsDataFrame(BascetAggregateMap(   bascetRoot,   inputName=\"..\",   aggr.raw(\"out.txt\") ))"},{"path":"https://henriksson-lab.github.io/zorn/articles/map_scripts.html","id":"custom-map-functions---details","dir":"Articles","previous_headings":"","what":"Custom MAP functions - details","title":"Map scripts","text":"look example MAP function, find BASH script conforms certain pattern. actually just script (language) takes certain command line arguments. script returns API version, also validating valid script MAP calls script returns list files extract Bascet, cell. , “*” means get everything. Asking less means higher performance –missing-file-mode Bascet files missing. “skip” means just proceed next cell compress output files. “default” means compress. However, tool generates compressed files already, just waste time trying , case script can return “uncompressed”. directory input files located store output . directory already created many threads use particular process. Note Bascet already calling multiple MAP scripts parallel thus typically little benefit making individual process multithreaded Return many threads (least 1) job get. used user runs mapcell specifies total number threads. Bascet try allocate workers accordingly. Return 1 mapcell script support multithreading called , check script needed software dependencies. case, returns “MAPCELL-CHECK”","code":"--bascet-api --expect-files  --compression-mode --input-dir XXX --output-dir YYY --num-threads ZZZ --recommend-threads --preflight-check"},{"path":"https://henriksson-lab.github.io/zorn/articles/read_quality_control.html","id":"fastqc","dir":"Articles","previous_headings":"","what":"FASTQC","title":"Read-based quality control","text":"want run QC cells whole, get average picture, simply run FASTQC reads transformation FASTQ: can also run FASTQC individual cell, case need convert FASTQ . takes fair bit time, can help tell , e.g., cluster cells caused technical issues adapter content. first run FASTQC mapcell: (SLURM-compatible step) outlier cell dataset, can investigate FASTQ HTML report follow manner (opening RShiny plot pane, separate browser): can also compare cells aggregating data. Note FASTQC creates rather complex statistics need extraction simple plotting One relevant statistic adapter content across read: can also retrieve table pass/fail statistics: many things can statistics, provide general interface table FASTQC generates: Possible values section : “Basic Statistics” “Per base sequence quality” “Per sequence quality scores” “Per base sequence content” “Per sequence GC content” “Per base N content” “Sequence Length Distribution” “Sequence Duplication Levels” “Overrepresented sequences” “Adapter Content” statistics can also extracted. Refer full reference manual list","code":"### Get reads in fastq format BascetMapTransform(   bascetRoot,   inputName=\"filtered\",      outputName=\"asfq\",         out_format=\"R1.fq.gz\" ) BascetMapCellFASTQ(   bascetRoot,   inputName = \"filtered\"  #or other source of reads ) BascetMapCellFASTQ(   bascetRoot,   inputName = \"filtered\"  #or other source of reads ) ShowFASTQCforCell(     bascetFile,      cellID=\"xyz\", #name of your cell      readnum=\"1\", #for R1 ) aggr_fastqc <- BascetAggregateFASTQC(   bascetRoot ) PlotFASTQCadapterContent <- function(     aggr_fastqc,     readnum=\"1\" #for R1 ) fastqc_passfail <- GetFASTQCpassfailStats(     aggr_fastqc,     readnum=\"1\" #for R1 ) mystats <- GetFASTQCassembledDF(     aggr_fastqc,      section=\"see below\",      readnum=\"1\" )"},{"path":"https://henriksson-lab.github.io/zorn/articles/slurm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using SLURM","text":"Zorn designed full replacement NextFlow job manager, processing single-cell genomics microbial isolates. design motivated Bascet file format: NextFlow operates file--file basis, Bascet keeps cells together sharded objects. natural minibatches otherwise rather small tasks, reducing overhead scheduling work (possibly many!) cells. SLURM one common job managers , Zorn thus works top SLURM writing appropriate Bascet commands. SLURM cluster, interested hear else people using!","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/slurm.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Using SLURM","text":"use SLURM, get used slightly different semantics run locally. First need set runner. way recommend , default values, partition submit , name account. can also set permissible default timeout time: make calls Bascet tutorials. main script, charge control flow, run tmux screen, login node cluster. likely want tune SLURM job bit terms many cores used. suggested method, relevant settings overridden per-job basis:","code":"## Set the new default runner. Note that the name should not be changed! bascet_runner.default <- SlurmRunner(   partition=\"shared\",    account=\"name_of_your_project\",    time=\"0-24:00:00\" )  ## get a Bascet instance as usual; this is a separate concern from the runner bascetInstance.default <- getBascetSingularityImage(storeAt=\"~/\") BascetGetRawAtrandiWGS(   bascetRoot,   rawmeta,   runner=SlurmRunner(     bascet_runner.default,     ncpu=5,     mem=\"5g\") )"},{"path":"https://henriksson-lab.github.io/zorn/articles/slurm.html","id":"slurm-settings","dir":"Articles","previous_headings":"","what":"SLURM settings","title":"Using SLURM","text":"unable give specific suggestions cpu memory depends SLURM instance configured. example, Swedish clusters set give memory proportion number CPUs. Bascet written avoid using large amounts RAM possible. Exceptions use downstream software KRAKEN (particular). operations multithreaded benefit CPUs per node. Speed however limited disk access speed. thus worth investigating log files execution see much CPU/memory actually needed, improve long-term running Bascet.","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/slurm.html","id":"advanced-asynchronous-execution","dir":"Articles","previous_headings":"","what":"Advanced: Asynchronous execution","title":"Using SLURM","text":"can also set SLURM jobs run background, instead stalling R session done. can primarily useful want use R session work waiting job. set mode running, create SLURM runner slightly differently: Whenever run job, now want catch handle job variable: running command, immediately get control back. see status job, best just run WaitForJob: can press ctrl+c end waiting loop early","code":"## Set the new default runner. Note that the name should not be changed! bascet_runner.default <- SlurmRunner(   ... #previous settings   direct=FALSE ## new! asynchronous mode )  ## get a Bascet instance as usual; this is a separate concern from the runner bascetInstance.default <- getBascetSingularityImage(storeAt=\"~/\") my_job <- BascetGetRawAtrandiWGS(  #note, store job in a variable   bascetRoot,   rawmeta,   runner=SlurmRunner(     bascet_runner.default,     ncpu=5,     mem=\"5g\") ) WaitForJob(my_job)"},{"path":"https://henriksson-lab.github.io/zorn/articles/snp_analysis.html","id":"alignment","dir":"Articles","previous_headings":"","what":"Alignment","title":"SNP analysis","text":"First align files reference choice. See alignment tutorial full details, example command align reference: (SLURM-compatible step)","code":"BascetAlignToReference(   bascetRoot,   inputName=\"fastp\", #FASTP-filtered FASTQ as input   outputNameBAMunsorted = \"myref_unsorted_aligned\",   outputNameBAMsorted = \"myref_aligned\",   useReference=\"..../../../myref\",   numLocalThreads=10 )"},{"path":"https://henriksson-lab.github.io/zorn/articles/snp_analysis.html","id":"extracting-cells-most-similar-to-the-reference","dir":"Articles","previous_headings":"","what":"Extracting cells most similar to the reference","title":"SNP analysis","text":"complex sample, likely want compare cells given species (however define ). can obtain rather trivial count table, including many reads align, later filtering. alignment tutorial details, example command:","code":"BascetCountChrom(   bascetRoot,   inputName=\"myref_unsorted_aligned\",   outputName=\"cnt_myref\",   runner=SlurmRunner(bascet_runner.default, ncpu=\"2\")  )"},{"path":"https://henriksson-lab.github.io/zorn/articles/snp_analysis.html","id":"snp-calling","dir":"Articles","previous_headings":"","what":"SNP-calling","title":"SNP analysis","text":"can now check cells genome deviate reference obtain SNPs. done calling CellSNP-lite. ok cells, even species interest; can filter later: (SLURM-compatible step)","code":"BascetRunCellSNP(   bascetRoot,   inputName=\"myref_aligned\",   numLocalThreads=5,   runner=SlurmRunner(bascet_runner.default, ncpu=\"5\")  )"},{"path":"https://henriksson-lab.github.io/zorn/articles/snp_analysis.html","id":"selecting-cells","dir":"Articles","previous_headings":"","what":"Selecting cells","title":"SNP analysis","text":"heavy work now . generated count matrix, can load like : can produce type kneeplot, showing well certain cells map reference: Based knee plot, can extract cells close enough reference like : #Clustering SNPs Load CellSNP-lite counts follows: Create Seurat object counts: usual transformations clustering: quick plots check clusters: Find differential SNPs using Seurat marker tools Plot SNPs liking ’s !","code":"# get aligned counts cnt_myref <- ReadBascetCountMatrix(bascetRoot,\"cnt_myref\")  # Compute fraction aligned cnt_myref$obs$tot_reads <- as.double(cnt_myref$obs$`_unmapped` + cnt_myref$X) cnt_myref$obs$frac_mapped <- as.double(cnt_myref$X/cnt_myref$obs$tot_reads) cnt_myref$obs$`_index` <- stringr::str_remove(cnt_myref$obs$`_index`,\"BASCET_\")  #will not be needed in the future rownames(cnt_myref$obs) <- cnt_myref$obs$`_index` ### Knee plot of alignment df <- data.frame(   frac_mapped = sort(cnt_myref$obs$frac_mapped, decreasing = TRUE),   index = 1:nrow(cnt_myref$obs) ) ggplot(df, aes(index, frac_mapped)) +    geom_line() +    scale_x_log10() +    theme_bw() list_cell_mutans <- cnt_myref$obs$`_index`[which(cnt_myref$obs$frac_mapped>0.8)] snp_ad <- ReadCellSNPmatrix(   bascetRoot,   \"cellsnp\" ) pbmc <- CreateSeuratObject(counts = t(snp_ad), project = \"pbmc3k\", min.cells = 3, min.features = 0)  #only keep selected cells (optional) pbmc <- pbmc[,colnames(pbmc) %in% list_cell_mutans]  #transfer count metadata (optional) pbmc$frac_mapped <-  cnt_mutans$obs[colnames(pbmc),]$frac_mapped pbmc$tot_reads <-  cnt_mutans$obs[colnames(pbmc),]$tot_reads ### Normalize data, PCA etc pbmc <- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000) pbmc <- NormalizeData(pbmc) pbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000) all.genes <- rownames(pbmc) pbmc <- ScaleData(pbmc, features = all.genes) ########## todo should normalize by sequencing depth of original cell! not SNP count  pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))  pbmc <- FindNeighbors(pbmc, dims = 1:10) pbmc <- FindClusters(pbmc, resolution = 0.5)  pbmc <- RunUMAP(pbmc, dims = 1:10)  pbmc$snp_count <- rowSums(pbmc@assays$RNA@layers$counts) DimPlot(pbmc, reduction = \"umap\") FeaturePlot(pbmc, reduction = \"umap\", features = c(\"snp_count\")) FeaturePlot(pbmc, reduction = \"umap\", features = c(\"frac_mapped\")) FeaturePlot(pbmc, reduction = \"umap\", features = c(\"tot_reads\")) pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)  pbmc.markers %>%   group_by(cluster) %>%   dplyr::filter(avg_log2FC > 2) %>%   slice_head(n = 100) %>%   ungroup() -> top10  as.data.frame(top10) FeaturePlot(pbmc, reduction = \"umap\", features = c(\"NZ-CP077404.1-7148-T-to-C\"))"},{"path":"https://henriksson-lab.github.io/zorn/articles/tcr_analysis.html","id":"install-trust4","dir":"Articles","previous_headings":"","what":"Install TRUST4","title":"TCR/BCR analysis","text":"TRUST4 part Bascet container (source). However, need provide ","code":""},{"path":"https://henriksson-lab.github.io/zorn/articles/tcr_analysis.html","id":"the-tcrbcr-workflow","dir":"Articles","previous_headings":"","what":"The TCR/BCR workflow","title":"TCR/BCR analysis","text":"Generate FASTQ-files alignment (SLURM-compatible step) Align reads using STAR (BWA): (SLURM-compatible step) Run TRUST4 aligned reads: (SLURM-compatible step) can now load extracted sequences R:","code":"###TODO ###TODO #TODO run-trust4 -b foo.bam -f human_IMGT+C.fa --barcode BC --UMI UMI -t 10 #TODO"},{"path":"https://henriksson-lab.github.io/zorn/articles/tcr_analysis.html","id":"citing","dir":"Articles","previous_headings":"","what":"Citing","title":"TCR/BCR analysis","text":"use TRUST4, cite addition Zorn/Bascet https://www.nature.com/articles/s41592-021-01142-2 Song, L., Cohen, D., Ouyang, Z. et al. TRUST4: immune repertoire reconstruction bulk single-cell RNA-seq data. Nat Methods (2021). https://doi.org/10.1038/s41592-021-01142-2","code":""},{"path":"https://henriksson-lab.github.io/zorn/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johan Henriksson. Author, maintainer. Laura Carroll. Author. Hadrien Gourlé. Author. Julian Dicken. Author. Henriksson Lab, Carroll Lab Collaborators. Funder.","code":""},{"path":"https://henriksson-lab.github.io/zorn/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gourlé H., Yakovenko ., Verma J., et al. Scalable single-cell metagenomic analysis Bascet Zorn. bioRxiv (2025). doi: https://doi.org/10.1101/2025.06.20.660799.","code":"@Article{,   author = {Hadrien Gourlé and Iryna Yakovenko and Jyoti Verma and Julian Dicken and Florian Albrecht and Linas Mazutis and Johan Normark and Nongfei Sheng and Nicklas Strömberg and Tommy Löfstedt and Laura M Carroll and Johan M Henriksson},   title = {Scalable single-cell metagenomic analysis with Bascet and Zorn},   journal = {bioRxiv},   year = {2025},   doi = {https://doi.org/10.1101/2025.06.20.660799},   url = {https://doi.org/10.1101/2025.06.20.660799}, }"},{"path":"https://henriksson-lab.github.io/zorn/index.html","id":"zorn","dir":"","previous_headings":"","what":"Zorn","title":"An all-purpose solution for processing of single-cell microbial data","text":"proud announce Zorn, R package workflow manager scalable single-cell analysis! install Zorn, see install page. get started using Zorn, see manual. use Zorn research, please cite preprint. Zorn developed maintained Henriksson Carroll labs","code":""},{"path":"https://henriksson-lab.github.io/zorn/index.html","id":"news","dir":"","previous_headings":"","what":"News","title":"An all-purpose solution for processing of single-cell microbial data","text":"2025-07-28: Version 0.4.0 now released. Please update Bascet match release. update changes GetRaw Shardify commands reduce memory consumption working large number cells. Parse Biosciences scRNA-seq now unofficially supported.","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AggregateMinhashes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate frequency of minhashes across cells — AggregateMinhashes","title":"Aggregate frequency of minhashes across cells — AggregateMinhashes","text":"Aggregate frequency minhashes across cells","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AggregateMinhashes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate frequency of minhashes across cells — AggregateMinhashes","text":"","code":"AggregateMinhashes(bascetRoot, inputName = \"minhash\", bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/AggregateMinhashes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate frequency of minhashes across cells — AggregateMinhashes","text":"bascetRoot root folder Bascets stored inputName Name input shard (Container minhashes) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AggregateMinhashes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate frequency of minhashes across cells — AggregateMinhashes","text":"Data.frame KMERs frequencies","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AtrandiBarcodeStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a Bascet, produce a matrix showing for each combinatorial barcode, how many times it occurs across the cells. Presented as a 96-well plate matrix — AtrandiBarcodeStats","title":"Given a Bascet, produce a matrix showing for each combinatorial barcode, how many times it occurs across the cells. Presented as a 96-well plate matrix — AtrandiBarcodeStats","text":"command assumes cells named follows: well1_well2_well3_well4, e.g. well1 format G12","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AtrandiBarcodeStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a Bascet, produce a matrix showing for each combinatorial barcode, how many times it occurs across the cells. Presented as a 96-well plate matrix — AtrandiBarcodeStats","text":"","code":"AtrandiBarcodeStats(   bascetRoot,   inputName = \"debarcoded\",   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/AtrandiBarcodeStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a Bascet, produce a matrix showing for each combinatorial barcode, how many times it occurs across the cells. Presented as a 96-well plate matrix — AtrandiBarcodeStats","text":"bascetRoot root folder Bascets stored inputName Name input shard (debarcoded reads) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/AtrandiBarcodeStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a Bascet, produce a matrix showing for each combinatorial barcode, how many times it occurs across the cells. Presented as a 96-well plate matrix — AtrandiBarcodeStats","text":"Matrix showing coverage barcode","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BarnyardPlotMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a matrix of Barnyard plots, i.e., counts for one species vs another, for all combinations of species. — BarnyardPlotMatrix","title":"Produce a matrix of Barnyard plots, i.e., counts for one species vs another, for all combinations of species. — BarnyardPlotMatrix","text":"Produce matrix Barnyard plots, .e., counts one species vs another, combinations species.","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BarnyardPlotMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a matrix of Barnyard plots, i.e., counts for one species vs another, for all combinations of species. — BarnyardPlotMatrix","text":"","code":"BarnyardPlotMatrix(adata)"},{"path":"https://henriksson-lab.github.io/zorn/reference/BarnyardPlotMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a matrix of Barnyard plots, i.e., counts for one species vs another, for all combinations of species. — BarnyardPlotMatrix","text":"adata Seurat object DefaultAssay holding counts per species (similar)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BarnyardPlotMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a matrix of Barnyard plots, i.e., counts for one species vs another, for all combinations of species. — BarnyardPlotMatrix","text":"ggarranged set ggplots","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/Bascet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A bascet, along with all the shards — Bascet-class","title":"A bascet, along with all the shards — Bascet-class","text":"bascet, along shards","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAMRfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from AMRfinder This is a thin wrapper around BascetAggregateMap — BascetAggregateAMRfinder","title":"Aggregate data from AMRfinder This is a thin wrapper around BascetAggregateMap — BascetAggregateAMRfinder","text":"Aggregate data AMRfinder thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAMRfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from AMRfinder This is a thin wrapper around BascetAggregateMap — BascetAggregateAMRfinder","text":"","code":"BascetAggregateAMRfinder(   bascetRoot,   inputName = \"AMRfinder\",   includeCells = NULL,   getColumn = \"Element.symbol\",   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAMRfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from AMRfinder This is a thin wrapper around BascetAggregateMap — BascetAggregateAMRfinder","text":"bascetRoot root folder Bascets stored inputName Name input shard runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance verbose Show debug output","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAMRfinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from AMRfinder This is a thin wrapper around BascetAggregateMap — BascetAggregateAMRfinder","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAbricate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from Abricate This is a thin wrapper around BascetAggregateMap — BascetAggregateAbricate","title":"Aggregate data from Abricate This is a thin wrapper around BascetAggregateMap — BascetAggregateAbricate","text":"Aggregate data Abricate thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAbricate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from Abricate This is a thin wrapper around BascetAggregateMap — BascetAggregateAbricate","text":"","code":"BascetAggregateAbricate(   bascetRoot,   inputName = \"abricate\",   includeCells = NULL,   verbose = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAbricate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from Abricate This is a thin wrapper around BascetAggregateMap — BascetAggregateAbricate","text":"bascetRoot root folder Bascets stored inputName Name input shard verbose Show debug output runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAbricate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from Abricate This is a thin wrapper around BascetAggregateMap — BascetAggregateAbricate","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAriba.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from Ariba This is a thin wrapper around BascetAggregateMap — BascetAggregateAriba","title":"Aggregate data from Ariba This is a thin wrapper around BascetAggregateMap — BascetAggregateAriba","text":"Aggregate data Ariba thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAriba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from Ariba This is a thin wrapper around BascetAggregateMap — BascetAggregateAriba","text":"","code":"BascetAggregateAriba(   bascetRoot,   inputName = \"ariba\",   verbose = NULL,   includeCells = NULL,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAriba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from Ariba This is a thin wrapper around BascetAggregateMap — BascetAggregateAriba","text":"bascetRoot root folder Bascets stored inputName Name input shard verbose Show debug output runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateAriba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from Ariba This is a thin wrapper around BascetAggregateMap — BascetAggregateAriba","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateFASTQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from FASTQC This is a thin wrapper around BascetAggregateMap — BascetAggregateFASTQC","title":"Aggregate data from FASTQC This is a thin wrapper around BascetAggregateMap — BascetAggregateFASTQC","text":"Aggregate data FASTQC thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateFASTQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from FASTQC This is a thin wrapper around BascetAggregateMap — BascetAggregateFASTQC","text":"","code":"BascetAggregateFASTQC(   bascetRoot,   inputName = \"fastqc\",   includeCells = NULL,   verbose = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateFASTQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from FASTQC This is a thin wrapper around BascetAggregateMap — BascetAggregateFASTQC","text":"bascetRoot root folder Bascets stored inputName Name input shard verbose Show debug output runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateFASTQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from FASTQC This is a thin wrapper around BascetAggregateMap — BascetAggregateFASTQC","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateGECCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from GECCO This is a thin wrapper around BascetAggregateMap — BascetAggregateGECCO","title":"Aggregate data from GECCO This is a thin wrapper around BascetAggregateMap — BascetAggregateGECCO","text":"Aggregate data GECCO thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateGECCO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from GECCO This is a thin wrapper around BascetAggregateMap — BascetAggregateGECCO","text":"","code":"BascetAggregateGECCO(   bascetRoot,   inputName = \"gecco\",   includeCells = NULL,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateGECCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from GECCO This is a thin wrapper around BascetAggregateMap — BascetAggregateGECCO","text":"bascetRoot root folder Bascets stored inputName Name input shard runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateGECCO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from GECCO This is a thin wrapper around BascetAggregateMap — BascetAggregateGECCO","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from previous Map call — BascetAggregateMap","title":"Aggregate data from previous Map call — BascetAggregateMap","text":"Aggregate data previous Map call","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from previous Map call — BascetAggregateMap","text":"","code":"BascetAggregateMap(   bascetRoot,   bascetName,   aggrFunction,   includeCells = NULL,   showProgress = TRUE,   verbose = FALSE,   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from previous Map call — BascetAggregateMap","text":"bascetRoot root folder Bascets stored bascetName Name input shard aggrFunction Function use extracting simplified data cell includeCells Cells aggregate showProgress Show progress bar verbose Show debug output","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from previous Map call — BascetAggregateMap","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateQUAST.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data from QUAST This is a thin wrapper around BascetAggregateMap — BascetAggregateQUAST","title":"Aggregate data from QUAST This is a thin wrapper around BascetAggregateMap — BascetAggregateQUAST","text":"Aggregate data QUAST thin wrapper around BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateQUAST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data from QUAST This is a thin wrapper around BascetAggregateMap — BascetAggregateQUAST","text":"","code":"BascetAggregateQUAST(   bascetRoot,   inputName = \"quast\",   includeCells = NULL,   verbose = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateQUAST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data from QUAST This is a thin wrapper around BascetAggregateMap — BascetAggregateQUAST","text":"bascetRoot root folder Bascets stored inputName Name input shard verbose Show debug output runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAggregateQUAST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data from QUAST This is a thin wrapper around BascetAggregateMap — BascetAggregateQUAST","text":"Aggregated data","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignToReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Align from FASTQ, generate sorted and indexed BAM file — BascetAlignToReference","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetAlignToReference","text":"Align FASTQ, generate sorted indexed BAM file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignToReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetAlignToReference","text":"","code":"BascetAlignToReference(   bascetRoot,   useReference,   numLocalThreads = 1,   inputName = \"asfq\",   outputNameBAMunsorted = \"unsorted_aligned\",   outputNameBAMsorted = \"aligned\",   doSort = TRUE,   overwrite = FALSE,   aligner = \"BWA\",   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignToReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetAlignToReference","text":"bascetRoot root folder Bascets stored useReference Name BWA reference use numLocalThreads Number threads use runner inputName Name input shard outputNameBAMunsorted Name unsorted BAMs outputNameBAMsorted Name sorted BAMs (generated) doSort Whether sort output overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignmentToBigwig.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a bigwig out of all reads in a sorted BAM. Note that the caller is responsible for sorting the BAM first — BascetAlignmentToBigwig","title":"Generate a bigwig out of all reads in a sorted BAM. Note that the caller is responsible for sorting the BAM first — BascetAlignmentToBigwig","text":"function mainly QC purposes. uses bamCoverage deepTools apt install python3-deeptools","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignmentToBigwig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a bigwig out of all reads in a sorted BAM. Note that the caller is responsible for sorting the BAM first — BascetAlignmentToBigwig","text":"","code":"BascetAlignmentToBigwig(   bascetRoot,   inputName = \"aligned\",   outputName = \"pileup\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignmentToBigwig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a bigwig out of all reads in a sorted BAM. Note that the caller is responsible for sorting the BAM first — BascetAlignmentToBigwig","text":"bascetRoot root folder Bascets stored outputName Name output shard (BIGWIG-file) overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetAlignmentToBigwig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a bigwig out of all reads in a sorted BAM. Note that the caller is responsible for sorting the BAM first — BascetAlignmentToBigwig","text":"runner job (details depends runner)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetBam2Fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"Take aligned BAM file and produce Fragments.tsv.gz, compatible with Signac ATAC-seq style analysis — BascetBam2Fragments","title":"Take aligned BAM file and produce Fragments.tsv.gz, compatible with Signac ATAC-seq style analysis — BascetBam2Fragments","text":"Take aligned BAM file produce Fragments.tsv.gz, compatible Signac ATAC-seq style analysis","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetBam2Fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take aligned BAM file and produce Fragments.tsv.gz, compatible with Signac ATAC-seq style analysis — BascetBam2Fragments","text":"","code":"BascetBam2Fragments(   bascetRoot,   inputName = \"aligned\",   outputName = \"fragments\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetBam2Fragments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take aligned BAM file and produce Fragments.tsv.gz, compatible with Signac ATAC-seq style analysis — BascetBam2Fragments","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetBam2Fragments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take aligned BAM file and produce Fragments.tsv.gz, compatible with Signac ATAC-seq style analysis — BascetBam2Fragments","text":"job, producing type Fragments.tsv.gz","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCacheComputation.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper to cache a computation. Put your function in as an argument, as R will only compute its value if needed. If the cache file exist, it will not be run again — BascetCacheComputation","title":"A wrapper to cache a computation. Put your function in as an argument, as R will only compute its value if needed. If the cache file exist, it will not be run again — BascetCacheComputation","text":"wrapper cache computation. Put function argument, R compute value needed. cache file exist, run ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCacheComputation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper to cache a computation. Put your function in as an argument, as R will only compute its value if needed. If the cache file exist, it will not be run again — BascetCacheComputation","text":"","code":"BascetCacheComputation(bascetRoot, fname, value)"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCacheComputation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper to cache a computation. Put your function in as an argument, as R will only compute its value if needed. If the cache file exist, it will not be run again — BascetCacheComputation","text":"bascetRoot root folder Bascets stored fname Name file store cache . extension .RDS added automatically value value cached","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCacheComputation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper to cache a computation. Put your function in as an argument, as R will only compute its value if needed. If the cache file exist, it will not be run again — BascetCacheComputation","text":"cached value","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of cells in a Bascet — BascetCellNames","title":"Get list of cells in a Bascet — BascetCellNames","text":"Get list cells Bascet","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of cells in a Bascet — BascetCellNames","text":"","code":"BascetCellNames(bascetRoot, bascetName, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of cells in a Bascet — BascetCellNames","text":"bascetRoot root folder Bascets stored bascetName Name bascet bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of cells in a Bascet — BascetCellNames","text":"Vector cell names strings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames_withstreamer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of cells in a Bascet – streamer provided — BascetCellNames_withstreamer","title":"Get list of cells in a Bascet – streamer provided — BascetCellNames_withstreamer","text":"Get list cells Bascet – streamer provided","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames_withstreamer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of cells in a Bascet – streamer provided — BascetCellNames_withstreamer","text":"","code":"BascetCellNames_withstreamer(bascetRoot, bascetName, streamer)"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames_withstreamer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of cells in a Bascet – streamer provided — BascetCellNames_withstreamer","text":"bascetRoot root folder Bascets stored bascetName Name bascet streamer Bascet streamer instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCellNames_withstreamer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of cells in a Bascet – streamer provided — BascetCellNames_withstreamer","text":"Vector cell names strings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeCountSketch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute count sketch for each cell. This is a thin wrapper around BascetMapCell — BascetComputeCountSketch","title":"Compute count sketch for each cell. This is a thin wrapper around BascetMapCell — BascetComputeCountSketch","text":"Compute count sketch cell. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeCountSketch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute count sketch for each cell. This is a thin wrapper around BascetMapCell — BascetComputeCountSketch","text":"","code":"BascetComputeCountSketch(   bascetRoot,   inputName = \"filtered\",   outputName = \"countsketch\",   overwrite = FALSE,   maxReads = 1e+05,   kmerSize = 31,   sketchSize = 5000,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeCountSketch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute count sketch for each cell. This is a thin wrapper around BascetMapCell — BascetComputeCountSketch","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist maxReads Max number reads sample per cell kmerSize Size KMER hash sketchSize Number dimensions reduce runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeCountSketch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute count sketch for each cell. This is a thin wrapper around BascetMapCell — BascetComputeCountSketch","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeMinhash.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute minhashes for each cell. This is a thin wrapper around BascetMapCell — BascetComputeMinhash","title":"Compute minhashes for each cell. This is a thin wrapper around BascetMapCell — BascetComputeMinhash","text":"Compute minhashes cell. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeMinhash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute minhashes for each cell. This is a thin wrapper around BascetMapCell — BascetComputeMinhash","text":"","code":"BascetComputeMinhash(   bascetRoot,   inputName = \"filtered\",   outputName = \"minhash\",   overwrite = FALSE,   maxReads = 1e+05,   kmerSize = 31,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeMinhash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute minhashes for each cell. This is a thin wrapper around BascetMapCell — BascetComputeMinhash","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist maxReads maximum number reads per cell sample kmerSize KMER size hashing runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetComputeMinhash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute minhashes for each cell. This is a thin wrapper around BascetMapCell — BascetComputeMinhash","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountChrom.html","id":null,"dir":"Reference","previous_headings":"","what":"From aligned BAM file, compute counts per chromosome — BascetCountChrom","title":"From aligned BAM file, compute counts per chromosome — BascetCountChrom","text":"aligned BAM file, compute counts per chromosome","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountChrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From aligned BAM file, compute counts per chromosome — BascetCountChrom","text":"","code":"BascetCountChrom(   bascetRoot,   inputName = \"aligned\",   outputName = \"chromcount\",   minMatching = 0,   removeDuplicates = TRUE,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountChrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From aligned BAM file, compute counts per chromosome — BascetCountChrom","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard minMatching Disregard reads fewer specified matches, based CIGAR string removeDuplicates Deduplicate reads overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountChrom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From aligned BAM file, compute counts per chromosome — BascetCountChrom","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"From aligned BAM file, compute counts per feature — BascetCountFeature","title":"From aligned BAM file, compute counts per feature — BascetCountFeature","text":"aligned BAM file, compute counts per feature","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From aligned BAM file, compute counts per feature — BascetCountFeature","text":"","code":"BascetCountFeature(   bascetRoot,   inputName = \"aligned\",   outputName = \"featurecount\",   gffFile,   useFeature = \"gene\",   attrGeneId = \"gene_id\",   attrGeneName = \"name\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From aligned BAM file, compute counts per feature — BascetCountFeature","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard gffFile GFF-like file use feature annotation useFeature Feature type file count attrGeneId Attribute field use gene ID attrGeneName Attribute field use gene name overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetCountFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From aligned BAM file, compute counts per feature — BascetCountFeature","text":"job, executing counting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetDumpContigs.html","id":null,"dir":"Reference","previous_headings":"","what":"Store all contigs in an output directory, as cell_id.fa — BascetDumpContigs","title":"Store all contigs in an output directory, as cell_id.fa — BascetDumpContigs","text":"Store contigs output directory, cell_id.fa","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetDumpContigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store all contigs in an output directory, as cell_id.fa — BascetDumpContigs","text":"","code":"BascetDumpContigs(   bascetRoot,   inputName = \"skesa\",   listCells,   outputDir,   bascetInstance )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetDumpContigs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store all contigs in an output directory, as cell_id.fa — BascetDumpContigs","text":"bascetRoot root folder Bascets stored inputName Name input shard (hold contigs) listCells List cells extract outputDir Directory store FASTA bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetDumpContigs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store all contigs in an output directory, as cell_id.fa — BascetDumpContigs","text":"Nothing","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetFilterAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter an alignment (BAM-file). — BascetFilterAlignment","title":"Filter an alignment (BAM-file). — BascetFilterAlignment","text":"typically used either remove host DNA, keep reads mapping known reference. BAM-file paired reads reads need mapped (flag 0x2); otherwise (flag 0x4)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetFilterAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter an alignment (BAM-file). — BascetFilterAlignment","text":"","code":"BascetFilterAlignment(   bascetRoot,   numLocalThreads = 1,   inputName,   outputName,   keepMapped = FALSE,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetFilterAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter an alignment (BAM-file). — BascetFilterAlignment","text":"bascetRoot root folder Bascets stored numLocalThreads Number threads use runner (TODO: get default runner settings?) inputName Name input shards (BAM-file format) outputName Name output shards (BAM-file format) keepMapped Keep mapped reads (TRUE) unmapped (FALSE) overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetFilterAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter an alignment (BAM-file). — BascetFilterAlignment","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGatherCountSketch.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather all count sketches into a single count sketch matrix — BascetGatherCountSketch","title":"Gather all count sketches into a single count sketch matrix — BascetGatherCountSketch","text":"Gather count sketches single count sketch matrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGatherCountSketch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather all count sketches into a single count sketch matrix — BascetGatherCountSketch","text":"","code":"BascetGatherCountSketch(   bascetRoot,   inputName = \"countsketch\",   outputName = \"countsketch_mat.csv\",   includeCells = NULL,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGatherCountSketch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather all count sketches into a single count sketch matrix — BascetGatherCountSketch","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output file includeCells List cells process overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance TODO produce binary file format instead; gather files upon loading?","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGatherCountSketch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather all count sketches into a single count sketch matrix — BascetGatherCountSketch","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGetRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate BAM with barcodes from input raw FASTQ — BascetGetRaw","title":"Generate BAM with barcodes from input raw FASTQ — BascetGetRaw","text":"Generate BAM barcodes input raw FASTQ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGetRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate BAM with barcodes from input raw FASTQ — BascetGetRaw","text":"","code":"BascetGetRaw(   bascetRoot,   rawmeta,   outputName = \"debarcoded\",   outputNameIncomplete = \"incomplete_reads\",   chemistry = \"atrandi_wgs\",   subchemistry = NULL,   barcodeTolerance = NULL,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGetRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate BAM with barcodes from input raw FASTQ — BascetGetRaw","text":"bascetRoot root folder Bascets stored rawmeta Metadata raw FASTQ input files. See DetectRawFileMeta outputName Name output files: Debarcoded reads outputNameIncomplete Name output files: Reads parsed chemistry type data parsed barcodeTolerance Optional: Number mismatches allowed barcode still considered valid runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetGetRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate BAM with barcodes from input raw FASTQ — BascetGetRaw","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeBWA.html","id":null,"dir":"Reference","previous_headings":"","what":"Index a genome using BWA such that it can be used for alignment — BascetIndexGenomeBWA","title":"Index a genome using BWA such that it can be used for alignment — BascetIndexGenomeBWA","text":"FUTURE: check genome indexed already","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeBWA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index a genome using BWA such that it can be used for alignment — BascetIndexGenomeBWA","text":"","code":"BascetIndexGenomeBWA(   genomeFile,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeBWA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index a genome using BWA such that it can be used for alignment — BascetIndexGenomeBWA","text":"genomeFile Name FASTA file holding genome sequence runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeSTAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Index a genome using STAR such that it can be used for alignment — BascetIndexGenomeSTAR","title":"Index a genome using STAR such that it can be used for alignment — BascetIndexGenomeSTAR","text":"Index genome using STAR can used alignment","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeSTAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index a genome using STAR such that it can be used for alignment — BascetIndexGenomeSTAR","text":"","code":"BascetIndexGenomeSTAR(   fastaFile,   gtfFile,   outDir,   numLocalThreads = 10,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeSTAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index a genome using STAR such that it can be used for alignment — BascetIndexGenomeSTAR","text":"fastaFile Name FASTA file holding genome sequence gtfFile GFF file holding genome annotation outDir directory store index. directory created numLocalThreads number threads use STAR index. Default 10. TODO get runner runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetIndexGenomeSTAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index a genome using STAR such that it can be used for alignment — BascetIndexGenomeSTAR","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetInstance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new bascet instance. For advanced users only — BascetInstance","title":"Create a new bascet instance. For advanced users only — BascetInstance","text":"Create new bascet instance. advanced users ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetInstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new bascet instance. For advanced users only — BascetInstance","text":"","code":"BascetInstance(bin, tempdir, prependCmd = \"\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetInstance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new bascet instance. For advanced users only — BascetInstance","text":"bin Name binary tempdir Directory store temporary files prependCmd Something prepend command, e.g. support container systems","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetInstance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new bascet instance. For advanced users only — BascetInstance","text":"Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetListFilesForCell.html","id":null,"dir":"Reference","previous_headings":"","what":"List files for a cell in a Bascet — BascetListFilesForCell","title":"List files for a cell in a Bascet — BascetListFilesForCell","text":"can made faster , e.g., reading location objects file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetListFilesForCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List files for a cell in a Bascet — BascetListFilesForCell","text":"","code":"BascetListFilesForCell(   bascetFile,   cellID,   bascetInstance = GetDefaultBascetInstance(),   superVerbose = FALSE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetListFilesForCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List files for a cell in a Bascet — BascetListFilesForCell","text":"bascetFile Bascet file object cellID Name cell bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetListFilesForCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List files for a cell in a Bascet — BascetListFilesForCell","text":"data.frame list files","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetLoadCountSketchMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Load count sketch matrix as Seurat object — BascetLoadCountSketchMatrix","title":"Load count sketch matrix as Seurat object — BascetLoadCountSketchMatrix","text":"Load count sketch matrix Seurat object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetLoadCountSketchMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load count sketch matrix as Seurat object — BascetLoadCountSketchMatrix","text":"","code":"BascetLoadCountSketchMatrix(bascetRoot, inputName = \"countsketch_mat.csv\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetLoadCountSketchMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load count sketch matrix as Seurat object — BascetLoadCountSketchMatrix","text":"bascetRoot root folder Bascets stored inputName Name countsketch matrix file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetLoadCountSketchMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load count sketch matrix as Seurat object — BascetLoadCountSketchMatrix","text":"Seurat object holding sketch reduction","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeKrakenCountMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a count matrix of taxonomy IDs from KRAKEN output — BascetMakeKrakenCountMatrix","title":"Produce a count matrix of taxonomy IDs from KRAKEN output — BascetMakeKrakenCountMatrix","text":"Produce count matrix taxonomy IDs KRAKEN output","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeKrakenCountMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a count matrix of taxonomy IDs from KRAKEN output — BascetMakeKrakenCountMatrix","text":"","code":"BascetMakeKrakenCountMatrix(   bascetRoot,   numLocalThreads = 1,   inputName = \"kraken_out\",   outputName = \"kraken\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeKrakenCountMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a count matrix of taxonomy IDs from KRAKEN output — BascetMakeKrakenCountMatrix","text":"bascetRoot root folder Bascets stored numLocalThreads Number threads KRAKEN use inputName Name input shard (KRAKEN output) outputName Name output shard (h5 count matrix) overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeKrakenCountMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a count matrix of taxonomy IDs from KRAKEN output — BascetMakeKrakenCountMatrix","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeMinhashHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather all minhashes into a single histogram file — BascetMakeMinhashHistogram","title":"Gather all minhashes into a single histogram file — BascetMakeMinhashHistogram","text":"Gather minhashes single histogram file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeMinhashHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather all minhashes into a single histogram file — BascetMakeMinhashHistogram","text":"","code":"BascetMakeMinhashHistogram(   bascetRoot,   inputName = \"minhash\",   outputName = \"minhash_hist.csv\",   includeCells = NULL,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeMinhashHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather all minhashes into a single histogram file — BascetMakeMinhashHistogram","text":"bascetRoot root folder Bascets stored inputName Name input shard (contain minhashes) outputName Name output file includeCells List cells include, NULL cells overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMakeMinhashHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather all minhashes into a single histogram file — BascetMakeMinhashHistogram","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a MAP function for all cells — BascetMapCell","title":"Call a MAP function for all cells — BascetMapCell","text":"Call MAP function cells","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a MAP function for all cells — BascetMapCell","text":"","code":"BascetMapCell(   bascetRoot,   withfunction,   inputName,   outputName,   args = list(),   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a MAP function for all cells — BascetMapCell","text":"bascetRoot root folder Bascets stored withfunction Function apply inputName Name input shard outputName Name output shard args List arguments (key,value) provide script overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call a MAP function for all cells — BascetMapCell","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAMRfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Run AMRfinder on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAMRfinder","title":"Run AMRfinder on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAMRfinder","text":"Run AMRfinder contigs cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAMRfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run AMRfinder on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAMRfinder","text":"","code":"BascetMapCellAMRfinder(   bascetRoot,   inputName = \"contigs\",   outputName = \"AMRfinder\",   db,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAMRfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run AMRfinder on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAMRfinder","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard db Path database overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAMRfinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run AMRfinder on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAMRfinder","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAbricate.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Abricate on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAbricate","title":"Run Abricate on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAbricate","text":"Run Abricate contigs cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAbricate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Abricate on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAbricate","text":"","code":"BascetMapCellAbricate(   bascetRoot,   inputName = \"contigs\",   outputName = \"abricate\",   db = \"ncbi\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAbricate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Abricate on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAbricate","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAbricate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Abricate on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAbricate","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAriba.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Ariba on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAriba","title":"Run Ariba on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAriba","text":"Run Ariba reads cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAriba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Ariba on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAriba","text":"","code":"BascetMapCellAriba(   bascetRoot,   inputName = \"filtered\",   outputName = \"ariba\",   db,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAriba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Ariba on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAriba","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard db Path database overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellAriba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Ariba on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellAriba","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellBakta.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bakta on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellBakta","title":"Run Bakta on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellBakta","text":"Run Bakta contigs cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellBakta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bakta on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellBakta","text":"","code":"BascetMapCellBakta(   bascetRoot,   inputName = \"contigs\",   outputName = \"bakta\",   db,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellBakta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bakta on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellBakta","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard db Path database overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellBakta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bakta on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellBakta","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellFASTQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run FASTQC on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellFASTQC","title":"Run FASTQC on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellFASTQC","text":"Run FASTQC reads cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellFASTQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run FASTQC on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellFASTQC","text":"","code":"BascetMapCellFASTQC(   bascetRoot,   inputName = \"filtered\",   outputName = \"fastqc\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellFASTQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run FASTQC on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellFASTQC","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellFASTQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run FASTQC on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellFASTQC","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellGECCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GEECCO on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellGECCO","title":"Run GEECCO on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellGECCO","text":"Run GEECCO contigs cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellGECCO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GEECCO on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellGECCO","text":"","code":"BascetMapCellGECCO(   bascetRoot,   inputName = \"contigs\",   outputName = \"gecco\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellGECCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GEECCO on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellGECCO","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellGECCO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GEECCO on contigs of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellGECCO","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellQUAST.html","id":null,"dir":"Reference","previous_headings":"","what":"Run QUAST on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellQUAST","title":"Run QUAST on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellQUAST","text":"Run QUAST reads cells. thin wrapper around BascetMapCell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellQUAST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run QUAST on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellQUAST","text":"","code":"BascetMapCellQUAST(   bascetRoot,   inputName = \"filtered\",   outputName = \"quast\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellQUAST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run QUAST on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellQUAST","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapCellQUAST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run QUAST on reads of all cells. This is a thin wrapper around BascetMapCell — BascetMapCellQUAST","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform data — BascetMapTransform","title":"Transform data — BascetMapTransform","text":"command enables subsetting list cells converting file formats merging shards dividing shards","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform data — BascetMapTransform","text":"","code":"BascetMapTransform(   bascetRoot,   inputName,   outputName,   numDivide = 1,   numMerge = 1,   outFormat = \"tirp.gz\",   includeCells = NULL,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform data — BascetMapTransform","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard numDivide Must >=1; 1, divide input shard number outputs given numMerge Must >=1; 1, merge number input shards one outFormat Extension output files includeCells List cells include, NULL include overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetMapTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform data — BascetMapTransform","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetQueryFq.html","id":null,"dir":"Reference","previous_headings":"","what":"Build count table from FASTQ reads and a list of selected kmers — BascetQueryFq","title":"Build count table from FASTQ reads and a list of selected kmers — BascetQueryFq","text":"Build count table FASTQ reads list selected kmers","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetQueryFq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build count table from FASTQ reads and a list of selected kmers — BascetQueryFq","text":"","code":"BascetQueryFq(   bascetRoot,   inputName = \"filtered\",   outputName = \"kmer_counts\",   useKMERs,   maxReads = 1e+06,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetQueryFq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build count table from FASTQ reads and a list of selected kmers — BascetQueryFq","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard useKMERs List KMERs query maxReads maximum number reads per cell sample overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetQueryFq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build count table from FASTQ reads and a list of selected kmers — BascetQueryFq","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one file from a Bascet — BascetReadFile","title":"Read one file from a Bascet — BascetReadFile","text":"TODO can made faster , e.g., reading location objects file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one file from a Bascet — BascetReadFile","text":"","code":"BascetReadFile(   bascetFile,   cellID,   filename,   as = c(\"tempfile\"),   bascetInstance = GetDefaultBascetInstance(),   verbose = FALSE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one file from a Bascet — BascetReadFile","text":"bascetFile Bascet file instance cellID Name cell filename Name file Format requested; affects return value bascetInstance Bascet instance verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one file from a Bascet — BascetReadFile","text":"=\"tempfile\": Name temporary file read content stored","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadMinhashHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Read histogram of KMERs, the output of BascetMakeMinhashHistogram — BascetReadMinhashHistogram","title":"Read histogram of KMERs, the output of BascetMakeMinhashHistogram — BascetReadMinhashHistogram","text":"Read histogram KMERs, output BascetMakeMinhashHistogram","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadMinhashHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read histogram of KMERs, the output of BascetMakeMinhashHistogram — BascetReadMinhashHistogram","text":"","code":"BascetReadMinhashHistogram(bascetRoot, inputName = \"minhash_hist.csv\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadMinhashHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read histogram of KMERs, the output of BascetMakeMinhashHistogram — BascetReadMinhashHistogram","text":"bascetRoot root folder Bascets stored inputName Name input shard","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetReadMinhashHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read histogram of KMERs, the output of BascetMakeMinhashHistogram — BascetReadMinhashHistogram","text":"KMER histogram","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunCellSNP.html","id":null,"dir":"Reference","previous_headings":"","what":"Align from FASTQ, generate sorted and indexed BAM file — BascetRunCellSNP","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetRunCellSNP","text":"TODO managed Bascet mapshard system, automatic input conversion. unaligned file made temp removed","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunCellSNP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetRunCellSNP","text":"","code":"BascetRunCellSNP(   bascetRoot,   inputName = \"aligned\",   outputName = \"cellsnp\",   numLocalThreads = 1,   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunCellSNP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align from FASTQ, generate sorted and indexed BAM file — BascetRunCellSNP","text":"bascetRoot root folder Bascets stored inputName Name input shard outputName Name output shard numLocalThreads Number threads use runner overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunFASTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Run FASTP for each cell. Input must be in FASTQ file format — BascetRunFASTP","title":"Run FASTP for each cell. Input must be in FASTQ file format — BascetRunFASTP","text":"Run FASTP cell. Input must FASTQ file format","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunFASTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run FASTP for each cell. Input must be in FASTQ file format — BascetRunFASTP","text":"","code":"BascetRunFASTP(   bascetRoot,   numLocalThreads,   inputName = \"asfq\",   outputName = \"fastp\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunFASTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run FASTP for each cell. Input must be in FASTQ file format — BascetRunFASTP","text":"bascetRoot root folder Bascets stored numLocalThreads Number threads use FASTP. TODO: autodetect? take runner? (fastp good defaults) inputName Name input shard outputName Name output shard overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunFASTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run FASTP for each cell. Input must be in FASTQ file format — BascetRunFASTP","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunKraken.html","id":null,"dir":"Reference","previous_headings":"","what":"Run KRAKEN2 for each cell — BascetRunKraken","title":"Run KRAKEN2 for each cell — BascetRunKraken","text":"Run KRAKEN2 cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunKraken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run KRAKEN2 for each cell — BascetRunKraken","text":"","code":"BascetRunKraken(   bascetRoot,   useKrakenDB = \"/data/henlab/kraken/standard-8\",   numLocalThreads = 1,   inputName = \"asfq\",   outputName = \"kraken_out\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunKraken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run KRAKEN2 for each cell — BascetRunKraken","text":"bascetRoot root folder Bascets stored useKrakenDB Path KRAKEN2 database numLocalThreads Number threads one KRAKEN instance inputName Name input shard (FASTQ) outputName Name output shard (kraken data) overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetRunKraken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run KRAKEN2 for each cell — BascetRunKraken","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardify.html","id":null,"dir":"Reference","previous_headings":"","what":"Take debarcoded reads, merge them, and split them into suitable numbers of shards. — BascetShardify","title":"Take debarcoded reads, merge them, and split them into suitable numbers of shards. — BascetShardify","text":"reads one cell guaranteed present single shard. makes parallel processing simple shard can processed separate computer. Using shards means computers can process data parallel. However, perform calculations single computer, one shard result speedup. option relevant using cluster compute nodes.","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take debarcoded reads, merge them, and split them into suitable numbers of shards. — BascetShardify","text":"","code":"BascetShardify(   debstat,   numOutputShards = 1,   outputName = \"filtered\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take debarcoded reads, merge them, and split them into suitable numbers of shards. — BascetShardify","text":"debstat Plan sharding provided PrepareSharding numOutputShards many shards generate /input library/ outputName Name output file: Properly sharded debarcoded reads overwrite Force overwriting existing files. default nothing files exist runner job manager, specifying command run (e.g. locally, via SLURM) bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take debarcoded reads, merge them, and split them into suitable numbers of shards. — BascetShardify","text":"runner job (details depends runner)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardifyOld.html","id":null,"dir":"Reference","previous_headings":"","what":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","title":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","text":"reads one cell guaranteed present single shard. makes parallel processing simple shard can processed separate computer. Using shards means computers can used.","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardifyOld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","text":"","code":"BascetShardifyOld(   bascetRoot,   inputName = \"debarcoded\",   includeCells = NULL,   numOutputShards = 1,   outputName = \"filtered\",   overwrite = FALSE,   runner = GetDefaultBascetRunner(),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardifyOld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","text":"inputName Name input file: Debarcoded reads outputName Name output file: Properly sharded debarcoded reads","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardifyOld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","text":"job executed, executed, depending runner settings","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/BascetShardifyOld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take debarcoded reads and split them into suitable numbers of shards. — BascetShardifyOld","text":"perform calculations single computer, one shard result speedup. option relevant using cluster compute nodes. TODO multiple input samples, way group ? otherwise reading input files needed. said, got index, list cells specified, possible quickly figure file needed merge TODO Figuring file needed can done \"planning\" (Zorn) stage TODO seems faster single merger writes multiple output files cell list provided. overhead accepted read input files discard cells fly","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChooseInformativeKMERs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick random KMERs from KMC3 database. The choice is among KMERs within a frequency range — ChooseInformativeKMERs","title":"Pick random KMERs from KMC3 database. The choice is among KMERs within a frequency range — ChooseInformativeKMERs","text":"Pick random KMERs KMC3 database. choice among KMERs within frequency range","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChooseInformativeKMERs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick random KMERs from KMC3 database. The choice is among KMERs within a frequency range — ChooseInformativeKMERs","text":"","code":"ChooseInformativeKMERs(kmerHist, minFreq = 0.005, maxFreq = 1)"},{"path":"https://henriksson-lab.github.io/zorn/reference/ChooseInformativeKMERs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick random KMERs from KMC3 database. The choice is among KMERs within a frequency range — ChooseInformativeKMERs","text":"kmerHist Data.frame KMER frequency minFreq Pick KMERs minimum frequency maxFreq Pick KMERs maxiumum frequency","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChooseInformativeKMERs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick random KMERs from KMC3 database. The choice is among KMERs within a frequency range — ChooseInformativeKMERs","text":"List KMERs","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChromToSpeciesCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a count matrix on strain level — ChromToSpeciesCount","title":"Produce a count matrix on strain level — ChromToSpeciesCount","text":"function likely depreciated future, bit specific keep library","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChromToSpeciesCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a count matrix on strain level — ChromToSpeciesCount","text":"","code":"ChromToSpeciesCount(adata, mapSeq2strain)"},{"path":"https://henriksson-lab.github.io/zorn/reference/ChromToSpeciesCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a count matrix on strain level — ChromToSpeciesCount","text":"adata Seurat object mapSeq2strain mapping sequence strain","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ChromToSpeciesCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a count matrix on strain level — ChromToSpeciesCount","text":"...","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CloseBascet.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a Bascet file. — CloseBascet","title":"Close a Bascet file. — CloseBascet","text":"always performed avoid memory leaks","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CloseBascet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a Bascet file. — CloseBascet","text":"","code":"CloseBascet(bascetFile)"},{"path":"https://henriksson-lab.github.io/zorn/reference/CloseBascet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a Bascet file. — CloseBascet","text":"bascetFile Bascet file instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CloseBascet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close a Bascet file. — CloseBascet","text":"handle Bascet","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountDataFrameToSparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Count entries in long format data frame and return as a sparse matrix — CountDataFrameToSparseMatrix","title":"Count entries in long format data frame and return as a sparse matrix — CountDataFrameToSparseMatrix","text":"Count entries long format data frame return sparse matrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountDataFrameToSparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count entries in long format data frame and return as a sparse matrix — CountDataFrameToSparseMatrix","text":"","code":"CountDataFrameToSparseMatrix(dat, rowname, colname)"},{"path":"https://henriksson-lab.github.io/zorn/reference/CountDataFrameToSparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count entries in long format data frame and return as a sparse matrix — CountDataFrameToSparseMatrix","text":"dat data.frame rowname Column use matrix row name colname Column use matrix column name","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountDataFrameToSparseMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count entries in long format data frame and return as a sparse matrix — CountDataFrameToSparseMatrix","text":"dgCMatrix sparse matrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountGrangeFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a feature matrix (as seurat object) given an seurat object having Fragments associated — CountGrangeFeatures","title":"Obtain a feature matrix (as seurat object) given an seurat object having Fragments associated — CountGrangeFeatures","text":"Obtain feature matrix (seurat object) given seurat object Fragments associated","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountGrangeFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a feature matrix (as seurat object) given an seurat object having Fragments associated — CountGrangeFeatures","text":"","code":"CountGrangeFeatures(adata, grangeGene)"},{"path":"https://henriksson-lab.github.io/zorn/reference/CountGrangeFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a feature matrix (as seurat object) given an seurat object having Fragments associated — CountGrangeFeatures","text":"adata Seurat object, FeatureMatrix grangeGene grange object telling count","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CountGrangeFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a feature matrix (as seurat object) given an seurat object having Fragments associated — CountGrangeFeatures","text":"Seurat AssayObject","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CreateSeuratObjectWithReduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a seurat object from e.g. count sketch reduction — CreateSeuratObjectWithReduction","title":"Create a seurat object from e.g. count sketch reduction — CreateSeuratObjectWithReduction","text":"Create seurat object e.g. count sketch reduction","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CreateSeuratObjectWithReduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a seurat object from e.g. count sketch reduction — CreateSeuratObjectWithReduction","text":"","code":"CreateSeuratObjectWithReduction(Q, reductionName = \"kmersketch\", assay = \"RNA\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/CreateSeuratObjectWithReduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a seurat object from e.g. count sketch reduction — CreateSeuratObjectWithReduction","text":"Q Countsketch matrix reductionName Name reduction store Q assay Name assay put reduction","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/CreateSeuratObjectWithReduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a seurat object from e.g. count sketch reduction — CreateSeuratObjectWithReduction","text":"Seurat object holding Q reduction","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DebarcodedKneePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce summary kneeplot given debarcoded statistics — DebarcodedKneePlot","title":"Produce summary kneeplot given debarcoded statistics — DebarcodedKneePlot","text":"Produce summary kneeplot given debarcoded statistics","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DebarcodedKneePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce summary kneeplot given debarcoded statistics — DebarcodedKneePlot","text":"","code":"DebarcodedKneePlot(debstat, filename = NULL)"},{"path":"https://henriksson-lab.github.io/zorn/reference/DebarcodedKneePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce summary kneeplot given debarcoded statistics — DebarcodedKneePlot","text":"debstat Statistics produced debarcoded files filename Optional file store kneeplot ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DebarcodedKneePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce summary kneeplot given debarcoded statistics — DebarcodedKneePlot","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DetectRawFileMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","title":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","text":"_R1 – common illumina sequencer SRR****_1.fastq.gz – typical SRA","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DetectRawFileMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","text":"","code":"DetectRawFileMeta(rawRoot, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/DetectRawFileMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","text":"rawRoot Path folder FASTQ files verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DetectRawFileMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","text":"data frame metadata raw input files","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DetectRawFileMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect metadata for raw input FASTQ files — DetectRawFileMeta","text":"TODO convenient handle multiple samples, sample1/xxx; case, prepend sample name barcodes. issue: shardifying, good keep info merge. reduces work plenty! keep list shards belong next step","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAMRfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a database for AMRfinder — DownloadDatabaseAMRfinder","title":"Download a database for AMRfinder — DownloadDatabaseAMRfinder","text":"Download database AMRfinder","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAMRfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a database for AMRfinder — DownloadDatabaseAMRfinder","text":"","code":"DownloadDatabaseAMRfinder(dbdir, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAMRfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a database for AMRfinder — DownloadDatabaseAMRfinder","text":"dbdir Directory download database bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAriba.html","id":null,"dir":"Reference","previous_headings":"","what":"Download database for Ariba — DownloadDatabaseAriba","title":"Download database for Ariba — DownloadDatabaseAriba","text":"Download database Ariba","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAriba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download database for Ariba — DownloadDatabaseAriba","text":"","code":"DownloadDatabaseAriba(   dbdir,   ref = \"ncbi\",   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseAriba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download database for Ariba — DownloadDatabaseAriba","text":"dbdir Directory download database ref reference download bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseBakta.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a database for Bakta — DownloadDatabaseBakta","title":"Download a database for Bakta — DownloadDatabaseBakta","text":"Download database Bakta","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/DownloadDatabaseBakta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a database for Bakta — DownloadDatabaseBakta","text":"","code":"DownloadDatabaseBakta(   dbdir,   dbtype = c(\"light\", \"full\"),   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChrom.html","id":null,"dir":"Reference","previous_headings":"","what":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome — FragmentCountsPerChrom","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome — FragmentCountsPerChrom","text":"Signac chromatin assay fragments, cell, count many reads per chromosome","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome — FragmentCountsPerChrom","text":"","code":"FragmentCountsPerChrom(chromAssay, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome — FragmentCountsPerChrom","text":"chromAssay ChromatinAssay bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChrom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome — FragmentCountsPerChrom","text":"FeatureMatrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChromAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome. This function directly returns an assay that can be added to a Seurat multimodal object — FragmentCountsPerChromAssay","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome. This function directly returns an assay that can be added to a Seurat multimodal object — FragmentCountsPerChromAssay","text":"Signac chromatin assay fragments, cell, count many reads per chromosome. function directly returns assay can added Seurat multimodal object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChromAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome. This function directly returns an assay that can be added to a Seurat multimodal object — FragmentCountsPerChromAssay","text":"","code":"FragmentCountsPerChromAssay(bascetRoot, inputName = \"fragments.1.tsv.gz\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChromAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome. This function directly returns an assay that can be added to a Seurat multimodal object — FragmentCountsPerChromAssay","text":"bascetRoot root folder Bascets stored inputName Name input shard","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentCountsPerChromAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From a Signac chromatin assay with fragments, for each cell, count how many reads per chromosome. This function directly returns an assay that can be added to a Seurat multimodal object — FragmentCountsPerChromAssay","text":"seurat object holding counts","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentsToSignac.html","id":null,"dir":"Reference","previous_headings":"","what":"From a fragments file, get a chromatin assay for Signac. — FragmentsToSignac","title":"From a fragments file, get a chromatin assay for Signac. — FragmentsToSignac","text":"Note: signac dirt slow counting writing. might scalable enough certain inputs tasks, still provide option using .","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentsToSignac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From a fragments file, get a chromatin assay for Signac. — FragmentsToSignac","text":"","code":"FragmentsToSignac(fragpath)"},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentsToSignac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From a fragments file, get a chromatin assay for Signac. — FragmentsToSignac","text":"fragpath List fragment file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/FragmentsToSignac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From a fragments file, get a chromatin assay for Signac. — FragmentsToSignac","text":"ChromatinAssay","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetBascetTempDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a temp directory to use; need to be created — GetBascetTempDir","title":"Get a temp directory to use; need to be created — GetBascetTempDir","text":"Get temp directory use; need created","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetBascetTempDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a temp directory to use; need to be created — GetBascetTempDir","text":"","code":"GetBascetTempDir(bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetBascetTempDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a temp directory to use; need to be created — GetBascetTempDir","text":"bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetBascetTempDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a temp directory to use; need to be created — GetBascetTempDir","text":"path temp directory can created. Must removed done","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetInstance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Bascet instance from global variable (bascetInstance.default) — GetDefaultBascetInstance","title":"Get default Bascet instance from global variable (bascetInstance.default) — GetDefaultBascetInstance","text":"Get default Bascet instance global variable (bascetInstance.default)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetInstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Bascet instance from global variable (bascetInstance.default) — GetDefaultBascetInstance","text":"","code":"GetDefaultBascetInstance()"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetInstance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Bascet instance from global variable (bascetInstance.default) — GetDefaultBascetInstance","text":"Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetRunner.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current default runner — GetDefaultBascetRunner","title":"Get the current default runner — GetDefaultBascetRunner","text":"Get current default runner","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetRunner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current default runner — GetDefaultBascetRunner","text":"","code":"GetDefaultBascetRunner()"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetDefaultBascetRunner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current default runner — GetDefaultBascetRunner","text":"current default runner","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCassembledDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame for one type of FASTQ statistics across across all cells — GetFASTQCassembledDF","title":"Get a data frame for one type of FASTQ statistics across across all cells — GetFASTQCassembledDF","text":"Get data frame one type FASTQ statistics across across cells","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCassembledDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame for one type of FASTQ statistics across across all cells — GetFASTQCassembledDF","text":"","code":"GetFASTQCassembledDF(aggrFastqData, section, readnum)"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCassembledDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame for one type of FASTQ statistics across across all cells — GetFASTQCassembledDF","text":"readnum 1 2, R1 R2","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCassembledDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame for one type of FASTQ statistics across across all cells — GetFASTQCassembledDF","text":"TODO","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCbasicStats.html","id":null,"dir":"Reference","previous_headings":"","what":"From aggregated FASTQC data, get basic statistics for overlay on UMAP etc — GetFASTQCbasicStats","title":"From aggregated FASTQC data, get basic statistics for overlay on UMAP etc — GetFASTQCbasicStats","text":"aggregated FASTQC data, get basic statistics overlay UMAP etc","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCbasicStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From aggregated FASTQC data, get basic statistics for overlay on UMAP etc — GetFASTQCbasicStats","text":"","code":"GetFASTQCbasicStats(aggrFastqData, readnum)"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCbasicStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From aggregated FASTQC data, get basic statistics for overlay on UMAP etc — GetFASTQCbasicStats","text":"aggrFastqData Aggregated FASTQ data readnum 1 2, R1 R2","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCbasicStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From aggregated FASTQC data, get basic statistics for overlay on UMAP etc — GetFASTQCbasicStats","text":"data.frame","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCpassfailStats.html","id":null,"dir":"Reference","previous_headings":"","what":"From aggregated FASTQC data, get overall pass-fail statistics for overlay on UMAP etc — GetFASTQCpassfailStats","title":"From aggregated FASTQC data, get overall pass-fail statistics for overlay on UMAP etc — GetFASTQCpassfailStats","text":"aggregated FASTQC data, get overall pass-fail statistics overlay UMAP etc","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCpassfailStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From aggregated FASTQC data, get overall pass-fail statistics for overlay on UMAP etc — GetFASTQCpassfailStats","text":"","code":"GetFASTQCpassfailStats(aggrFastqData, readnum)"},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCpassfailStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From aggregated FASTQC data, get overall pass-fail statistics for overlay on UMAP etc — GetFASTQCpassfailStats","text":"readnum 1 2, R1 R2","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/GetFASTQCpassfailStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From aggregated FASTQC data, get overall pass-fail statistics for overlay on UMAP etc — GetFASTQCpassfailStats","text":"data.frame","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KneeplotPerSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a kneeplot — KneeplotPerSpecies","title":"Produce a kneeplot — KneeplotPerSpecies","text":"Produce kneeplot","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KneeplotPerSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a kneeplot — KneeplotPerSpecies","text":"","code":"KneeplotPerSpecies(adata, maxSpecies = NULL)"},{"path":"https://henriksson-lab.github.io/zorn/reference/KneeplotPerSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a kneeplot — KneeplotPerSpecies","text":"adata Seurat object DefaultAssay counts per species (similar) maxSpecies Maximum number species show. abundant species shown first","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KneeplotPerSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a kneeplot — KneeplotPerSpecies","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenFindConsensusTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"For a KRAKEN2 count matrix, return consensus taxID for each cell as metadata — KrakenFindConsensusTaxonomy","title":"For a KRAKEN2 count matrix, return consensus taxID for each cell as metadata — KrakenFindConsensusTaxonomy","text":"KRAKEN2 count matrix, return consensus taxID cell metadata","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenFindConsensusTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a KRAKEN2 count matrix, return consensus taxID for each cell as metadata — KrakenFindConsensusTaxonomy","text":"","code":"KrakenFindConsensusTaxonomy(mat)"},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenFindConsensusTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a KRAKEN2 count matrix, return consensus taxID for each cell as metadata — KrakenFindConsensusTaxonomy","text":"mat count matrix, typically sparse format","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenFindConsensusTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a KRAKEN2 count matrix, return consensus taxID for each cell as metadata — KrakenFindConsensusTaxonomy","text":"data.frame holding cellID consensus taxID","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenKneePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a KRAKEN2 adata object and generate per-species kneeplots — KrakenKneePlot","title":"Take a KRAKEN2 adata object and generate per-species kneeplots — KrakenKneePlot","text":"Take KRAKEN2 adata object generate per-species kneeplots","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenKneePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a KRAKEN2 adata object and generate per-species kneeplots — KrakenKneePlot","text":"","code":"KrakenKneePlot(   adata,   groupby = \"phylum\",   showNumSpecies = 15,   sortByName = FALSE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenKneePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a KRAKEN2 adata object and generate per-species kneeplots — KrakenKneePlot","text":"groupby Valid options : Genus, phylum species sortByName Sort name","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenKneePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a KRAKEN2 adata object and generate per-species kneeplots — KrakenKneePlot","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenSpeciesDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Using a KRAKEN2 count matrix, produce a ","title":"Using a KRAKEN2 count matrix, produce a ","text":"Using KRAKEN2 count matrix, produce \"kneeplot\" species","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenSpeciesDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using a KRAKEN2 count matrix, produce a ","text":"","code":"KrakenSpeciesDistribution(adata, use_assay = \"kraken\")"},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenSpeciesDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using a KRAKEN2 count matrix, produce a ","text":"adata Seurat object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/KrakenSpeciesDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using a KRAKEN2 count matrix, produce a ","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ListDatabaseAbricate.html","id":null,"dir":"Reference","previous_headings":"","what":"List installed databases available for Abricate — ListDatabaseAbricate","title":"List installed databases available for Abricate — ListDatabaseAbricate","text":"List installed databases available Abricate","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ListDatabaseAbricate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List installed databases available for Abricate — ListDatabaseAbricate","text":"","code":"ListDatabaseAbricate(dbdir, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/ListDatabaseAbricate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List installed databases available for Abricate — ListDatabaseAbricate","text":"List database names","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/LocalRunner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new local runner instance — LocalRunner","title":"Create new local runner instance — LocalRunner","text":"Create new local runner instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/LocalRunner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new local runner instance — LocalRunner","text":"","code":"LocalRunner(maxcpu = \"10\", direct = TRUE, showScript = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/LocalRunner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new local runner instance — LocalRunner","text":"maxcpu Number CPUs use (max) direct Run jobs synchronously showScript Show script run, debugging purposes","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/LocalRunner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new local runner instance — LocalRunner","text":"runner instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapCellMultiListAsDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function; alternative is to somehow implement as.data.frame — MapCellMultiListAsDataFrame","title":"Convenience function; alternative is to somehow implement as.data.frame — MapCellMultiListAsDataFrame","text":"one puts cellID new column","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapCellMultiListAsDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function; alternative is to somehow implement as.data.frame — MapCellMultiListAsDataFrame","text":"","code":"MapCellMultiListAsDataFrame(mylist)"},{"path":"https://henriksson-lab.github.io/zorn/reference/MapCellMultiListAsDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function; alternative is to somehow implement as.data.frame — MapCellMultiListAsDataFrame","text":"TODO","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapCellMultiListAsDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience function; alternative is to somehow implement as.data.frame — MapCellMultiListAsDataFrame","text":"FUTURE possible make new MapListAsDataFrame","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapListAsDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function; alternative is to somehow implement as.data.frame. — MapListAsDataFrame","title":"Convenience function; alternative is to somehow implement as.data.frame. — MapListAsDataFrame","text":"Convenience function; alternative somehow implement .data.frame.","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapListAsDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function; alternative is to somehow implement as.data.frame. — MapListAsDataFrame","text":"","code":"MapListAsDataFrame(mylist)"},{"path":"https://henriksson-lab.github.io/zorn/reference/MapListAsDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function; alternative is to somehow implement as.data.frame. — MapListAsDataFrame","text":"mylist TODO","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/MapListAsDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function; alternative is to somehow implement as.data.frame. — MapListAsDataFrame","text":"data.frame","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/NoRunner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new no-runner instance, used for debugging — NoRunner","title":"Create new no-runner instance, used for debugging — NoRunner","text":"Create new -runner instance, used debugging","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/NoRunner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new no-runner instance, used for debugging — NoRunner","text":"","code":"NoRunner(showScript = TRUE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/NoRunner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new no-runner instance, used for debugging — NoRunner","text":"showScript debugging: print script run","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/NoRunner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new no-runner instance, used for debugging — NoRunner","text":"NoRunner instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/OpenBascet.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a Bascet, prepare it for reading individual files — OpenBascet","title":"Open a Bascet, prepare it for reading individual files — OpenBascet","text":"Note, current code based pure R, efficient calls can made future. thus advise direct zip-file manipulation guarantee future support ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/OpenBascet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a Bascet, prepare it for reading individual files — OpenBascet","text":"","code":"OpenBascet(bascetRoot, bascetName, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/OpenBascet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a Bascet, prepare it for reading individual files — OpenBascet","text":"bascetRoot root folder Bascets stored bascetName Name bascet bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/OpenBascet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a Bascet, prepare it for reading individual files — OpenBascet","text":"handle Bascet","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotFASTQCadapterContent.html","id":null,"dir":"Reference","previous_headings":"","what":"From aggregated FASTQC data, plot adapter content — PlotFASTQCadapterContent","title":"From aggregated FASTQC data, plot adapter content — PlotFASTQCadapterContent","text":"aggregated FASTQC data, plot adapter content","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotFASTQCadapterContent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From aggregated FASTQC data, plot adapter content — PlotFASTQCadapterContent","text":"","code":"PlotFASTQCadapterContent(aggrFastqData, readnum)"},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotFASTQCadapterContent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From aggregated FASTQC data, plot adapter content — PlotFASTQCadapterContent","text":"aggrFastqData Aggregated FASTQ data readnum 1 2, R1 R2","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotFASTQCadapterContent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From aggregated FASTQC data, plot adapter content — PlotFASTQCadapterContent","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a histogram, loaded by ReadHistogram — PlotHistogram","title":"Plot a histogram, loaded by ReadHistogram — PlotHistogram","text":"Plot histogram, loaded ReadHistogram","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a histogram, loaded by ReadHistogram — PlotHistogram","text":"","code":"PlotHistogram(dat)"},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a histogram, loaded by ReadHistogram — PlotHistogram","text":"dat Histogram object ReadHistogram","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a histogram, loaded by ReadHistogram — PlotHistogram","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotJohnsonLindenstraussMinDim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","title":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","text":"https://en.wikipedia.org/wiki/Johnson–Lindenstrauss_lemma","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotJohnsonLindenstraussMinDim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","text":"","code":"PlotJohnsonLindenstraussMinDim(listEps, minCells = 10, maxCells = 1e+06)"},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotJohnsonLindenstraussMinDim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","text":"listEps List eps plot minCells Plot range min cells consider maxCells Plot range max cells consider","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotJohnsonLindenstraussMinDim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PlotJohnsonLindenstraussMinDim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot minimum number of dimensions needed to retain distance between samples — PlotJohnsonLindenstraussMinDim","text":"(1 - eps) ||u - v||^2 < ||p(u) - p(v)||^2 < (1 + eps) ||u - v||^2","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PrepareSharding.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare to shard reads by collecting statistics about each barcode, and filtering out cells with few reads — PrepareSharding","title":"Prepare to shard reads by collecting statistics about each barcode, and filtering out cells with few reads — PrepareSharding","text":"Prepare shard reads collecting statistics barcode, filtering cells reads","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PrepareSharding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare to shard reads by collecting statistics about each barcode, and filtering out cells with few reads — PrepareSharding","text":"","code":"PrepareSharding(   bascetRoot,   inputName = \"debarcoded\",   minQuantile = 0.9,   bascetInstance = GetDefaultBascetInstance(),   verbose = TRUE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/PrepareSharding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare to shard reads by collecting statistics about each barcode, and filtering out cells with few reads — PrepareSharding","text":"bascetRoot root folder Bascets stored inputName Name input shard minQuantile Read count-based cutoff inclusion final shards bascetInstance Bascet instance verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/PrepareSharding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare to shard reads by collecting statistics about each barcode, and filtering out cells with few reads — PrepareSharding","text":"Statistics debarcoded reads","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadBascetCountMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a count matrix as produced by Bascet (hdf5 format). This can be output from both BascetQueryFq and BascetCountChrom — ReadBascetCountMatrix","title":"Read a count matrix as produced by Bascet (hdf5 format). This can be output from both BascetQueryFq and BascetCountChrom — ReadBascetCountMatrix","text":"Read count matrix produced Bascet (hdf5 format). can output BascetQueryFq BascetCountChrom","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadBascetCountMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a count matrix as produced by Bascet (hdf5 format). This can be output from both BascetQueryFq and BascetCountChrom — ReadBascetCountMatrix","text":"","code":"ReadBascetCountMatrix(bascetRoot, inputName, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadBascetCountMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a count matrix as produced by Bascet (hdf5 format). This can be output from both BascetQueryFq and BascetCountChrom — ReadBascetCountMatrix","text":"bascetRoot root folder Bascets stored inputName Name input shard verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadBascetCountMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a count matrix as produced by Bascet (hdf5 format). This can be output from both BascetQueryFq and BascetCountChrom — ReadBascetCountMatrix","text":"Count matrix sparseMatrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadCellSNPmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a count matrix as produced by CellSNP, but as shards — ReadCellSNPmatrix","title":"Read a count matrix as produced by CellSNP, but as shards — ReadCellSNPmatrix","text":"Read count matrix produced CellSNP, shards","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadCellSNPmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a count matrix as produced by CellSNP, but as shards — ReadCellSNPmatrix","text":"","code":"ReadCellSNPmatrix(bascetRoot, inputName, listCells = NULL, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadCellSNPmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a count matrix as produced by CellSNP, but as shards — ReadCellSNPmatrix","text":"bascetRoot root folder Bascets stored inputName Name input shard listCells Optional list cells extract verbose Show process status debugging purposes","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadCellSNPmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a count matrix as produced by CellSNP, but as shards — ReadCellSNPmatrix","text":"Count matrix sparseMatrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the count histogram associated with a Bascet. Not all Bascets have one, but it is typically produced after debarcoding — ReadHistogram","title":"Read the count histogram associated with a Bascet. Not all Bascets have one, but it is typically produced after debarcoding — ReadHistogram","text":"Read count histogram associated Bascet. Bascets one, typically produced debarcoding","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the count histogram associated with a Bascet. Not all Bascets have one, but it is typically produced after debarcoding — ReadHistogram","text":"","code":"ReadHistogram(   bascetRoot,   inputName,   bascetInstance = GetDefaultBascetInstance(),   verbose = TRUE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the count histogram associated with a Bascet. Not all Bascets have one, but it is typically produced after debarcoding — ReadHistogram","text":"bascetRoot root folder Bascets stored inputName Name input shard bascetInstance Bascet instance verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ReadHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the count histogram associated with a Bascet. Not all Bascets have one, but it is typically produced after debarcoding — ReadHistogram","text":"Histogram data.frame","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SetTaxonomyNamesFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","title":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","text":"TODO: append name axis","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SetTaxonomyNamesFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","text":"","code":"SetTaxonomyNamesFeatures(mat, keepSpeciesOnly = TRUE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/SetTaxonomyNamesFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","text":"mat description keepSpeciesOnly description","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SetTaxonomyNamesFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","text":"named count matrix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SetTaxonomyNamesFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Take a KRAKEN2 count matrix where the column is the taxonomyID. Convert to a matrix where the columns instead are the names of each taxonomy. Unused taxonomyID columns will not be kept — SetTaxonomyNamesFeatures","text":"TODO used","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ShowFASTQCforCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the FASTQC HTML report for a cell — ShowFASTQCforCell","title":"Show the FASTQC HTML report for a cell — ShowFASTQCforCell","text":"Show FASTQC HTML report cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ShowFASTQCforCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the FASTQC HTML report for a cell — ShowFASTQCforCell","text":"","code":"ShowFASTQCforCell(   bascetFile,   cellID,   readnum = \"1\",   useBrowser = FALSE,   verbose = FALSE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/ShowFASTQCforCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the FASTQC HTML report for a cell — ShowFASTQCforCell","text":"readnum 1 2, R1 R2 useBrowser Use operating system browser open file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/ShowFASTQCforCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the FASTQC HTML report for a cell — ShowFASTQCforCell","text":"TODO","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SlurmRunner.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a runner that submits jobs to SLURM — SlurmRunner","title":"Create a runner that submits jobs to SLURM — SlurmRunner","text":"Create runner submits jobs SLURM","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SlurmRunner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a runner that submits jobs to SLURM — SlurmRunner","text":"","code":"SlurmRunner(   settings = NULL,   ncpu = NULL,   partition = NULL,   account = NULL,   time = NULL,   prepend = NULL,   mem = NULL,   direct = NULL,   deleteScript = NULL,   benchmark = NULL,   verbose = NULL )"},{"path":"https://henriksson-lab.github.io/zorn/reference/SlurmRunner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a runner that submits jobs to SLURM — SlurmRunner","text":"settings Default settings override; can NULL ncpu Number cores requested (SLURM -c) partition partition run job (SLURM -p) account account run job (SLURM -) time time job allowed run, e.g. \"0-72:00:00\" (SLURM -t) prepend Something prepend command. TODO seems used. present instance instead!! mem Amount main memory reserve (SLURM –mem) direct Run get result directly. FALSE implies asynchronous execution deleteScript Delete job script execution. Set FALSE want dissect debugging purposes benchmark Enable logging final CPU memory usage verbose Enable additional debug output","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SlurmRunner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a runner that submits jobs to SLURM — SlurmRunner","text":"SLURM runner","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SpeciesCorrMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"TODO is this function used? export — SpeciesCorrMatrix","title":"TODO is this function used? export — SpeciesCorrMatrix","text":"TODO function used? export","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SpeciesCorrMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TODO is this function used? export — SpeciesCorrMatrix","text":"","code":"SpeciesCorrMatrix(adata)"},{"path":"https://henriksson-lab.github.io/zorn/reference/SpeciesCorrMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TODO is this function used? export — SpeciesCorrMatrix","text":"adata description","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/SpeciesCorrMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TODO is this function used? export — SpeciesCorrMatrix","text":"ggplot object","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TabixGetFragmentsSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Using Tabix, get list of sequences in a fragment file — TabixGetFragmentsSeqs","title":"Using Tabix, get list of sequences in a fragment file — TabixGetFragmentsSeqs","text":"Using Tabix, get list sequences fragment file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TabixGetFragmentsSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using Tabix, get list of sequences in a fragment file — TabixGetFragmentsSeqs","text":"","code":"TabixGetFragmentsSeqs(fragpath, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/TabixGetFragmentsSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using Tabix, get list of sequences in a fragment file — TabixGetFragmentsSeqs","text":"fragpath List fragment file bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TabixGetFragmentsSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using Tabix, get list of sequences in a fragment file — TabixGetFragmentsSeqs","text":"raw result tabix","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TestBascetInstance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Bascet instance works — TestBascetInstance","title":"Check if a Bascet instance works — TestBascetInstance","text":"Check Bascet instance works","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TestBascetInstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Bascet instance works — TestBascetInstance","text":"","code":"TestBascetInstance(bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/TestBascetInstance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Bascet instance works — TestBascetInstance","text":"bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/TestBascetInstance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Bascet instance works — TestBascetInstance","text":"\"ok\" instance works; panic otherwise","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.abricate.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.abricate","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.abricate","text":"Callback function aggregating ABRicate data cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.abricate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.abricate","text":"","code":"aggr.abricate(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.abricate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.abricate","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.abricate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.abricate","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.amrfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.amrfinder","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.amrfinder","text":"Callback function aggregating ABRicate data cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.amrfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.amrfinder","text":"","code":"aggr.amrfinder(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.amrfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.amrfinder","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.amrfinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating ABRicate data for each cell. To be called from BascetAggregateMap — aggr.amrfinder","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.ariba.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating ARIBA data for each cell. To be called from BascetAggregateMap — aggr.ariba","title":"Callback function for aggregating ARIBA data for each cell. To be called from BascetAggregateMap — aggr.ariba","text":"Callback function aggregating ARIBA data cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.ariba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating ARIBA data for each cell. To be called from BascetAggregateMap — aggr.ariba","text":"","code":"aggr.ariba(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.ariba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating ARIBA data for each cell. To be called from BascetAggregateMap — aggr.ariba","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.ariba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating ARIBA data for each cell. To be called from BascetAggregateMap — aggr.ariba","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.fastqc.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating FASTQC data for each cell. To be called from BascetAggregateMap — aggr.fastqc","title":"Callback function for aggregating FASTQC data for each cell. To be called from BascetAggregateMap — aggr.fastqc","text":"Callback function aggregating FASTQC data cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.fastqc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating FASTQC data for each cell. To be called from BascetAggregateMap — aggr.fastqc","text":"","code":"aggr.fastqc(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.fastqc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating FASTQC data for each cell. To be called from BascetAggregateMap — aggr.fastqc","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.fastqc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating FASTQC data for each cell. To be called from BascetAggregateMap — aggr.fastqc","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.gecco.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating GECCO data for each cell. To be called from BascetAggregateMap — aggr.gecco","title":"Callback function for aggregating GECCO data for each cell. To be called from BascetAggregateMap — aggr.gecco","text":"Callback function aggregating GECCO data cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.gecco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating GECCO data for each cell. To be called from BascetAggregateMap — aggr.gecco","text":"","code":"aggr.gecco(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.gecco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating GECCO data for each cell. To be called from BascetAggregateMap — aggr.gecco","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.gecco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating GECCO data for each cell. To be called from BascetAggregateMap — aggr.gecco","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.minhash.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating min-hashes for each cell. To be called from BascetAggregateMap — aggr.minhash","title":"Callback function for aggregating min-hashes for each cell. To be called from BascetAggregateMap — aggr.minhash","text":"Callback function aggregating min-hashes cell. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.minhash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating min-hashes for each cell. To be called from BascetAggregateMap — aggr.minhash","text":"","code":"aggr.minhash(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.minhash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating min-hashes for each cell. To be called from BascetAggregateMap — aggr.minhash","text":"bascetFile Bascet file handle cellID ID cell process bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.minhash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating min-hashes for each cell. To be called from BascetAggregateMap — aggr.minhash","text":"Minhash data (minhash.txt) cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.quast.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for aggregating QUAST data. To be called from BascetAggregateMap — aggr.quast","title":"Callback function for aggregating QUAST data. To be called from BascetAggregateMap — aggr.quast","text":"Callback function aggregating QUAST data. called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.quast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for aggregating QUAST data. To be called from BascetAggregateMap — aggr.quast","text":"","code":"aggr.quast(bascetFile, cellID, bascetInstance)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.quast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for aggregating QUAST data. To be called from BascetAggregateMap — aggr.quast","text":"bascetFile opened Bascet file cellID Cell ID bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.quast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for aggregating QUAST data. To be called from BascetAggregateMap — aggr.quast","text":"Data one cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.rawtext.html","id":null,"dir":"Reference","previous_headings":"","what":"Callback function for just getting raw file contents To be called from BascetAggregateMap — aggr.rawtext","title":"Callback function for just getting raw file contents To be called from BascetAggregateMap — aggr.rawtext","text":"Callback function just getting raw file contents called BascetAggregateMap","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.rawtext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callback function for just getting raw file contents To be called from BascetAggregateMap — aggr.rawtext","text":"","code":"aggr.rawtext(fname)"},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.rawtext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callback function for just getting raw file contents To be called from BascetAggregateMap — aggr.rawtext","text":"fname Name output filename get cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/aggr.rawtext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callback function for just getting raw file contents To be called from BascetAggregateMap — aggr.rawtext","text":"QUAST data cell","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/bascetCheckOverwriteOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","title":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","text":"_R1 – common illumina sequencer SRR****_1.fastq.gz – typical SRA","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/bascetCheckOverwriteOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","text":"","code":"bascetCheckOverwriteOutput(outputFiles, overwrite)"},{"path":"https://henriksson-lab.github.io/zorn/reference/bascetCheckOverwriteOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","text":"outputFiles Files expect exist overwrite Files expect exist","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/bascetCheckOverwriteOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","text":"TRUE ok proceed","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/bascetCheckOverwriteOutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect metadata for raw input FASTQ files — bascetCheckOverwriteOutput","text":"TODO convenient handle multiple samples, sample1/xxx; case, prepend sample name barcodes. issue: shardifying, good keep info merge. reduces work plenty! keep list shards belong next step","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/detectShardsForFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Figure out which shards belong together given root input name and extension i.e. root/name.##.ext — detectShardsForFile","title":"Helper function: Figure out which shards belong together given root input name and extension i.e. root/name.##.ext — detectShardsForFile","text":"Helper function: Figure shards belong together given root input name extension .e. root/name.##.ext","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/detectShardsForFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Figure out which shards belong together given root input name and extension i.e. root/name.##.ext — detectShardsForFile","text":"","code":"detectShardsForFile(bascetRoot, inputName)"},{"path":"https://henriksson-lab.github.io/zorn/reference/detectShardsForFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: Figure out which shards belong together given root input name and extension i.e. root/name.##.ext — detectShardsForFile","text":"bascetRoot root folder Bascets stored inputName Name input shard","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/detectShardsForFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Figure out which shards belong together given root input name and extension i.e. root/name.##.ext — detectShardsForFile","text":"List files correspond shard","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExit.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: end an instance. the object should no longer be used after calling this function — extractstreamerExit","title":"extract streamer: end an instance. the object should no longer be used after calling this function — extractstreamerExit","text":"extract streamer: end instance. object longer used calling function","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: end an instance. the object should no longer be used after calling this function — extractstreamerExit","text":"","code":"extractstreamerExit(p)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: end an instance. the object should no longer be used after calling this function — extractstreamerExit","text":"p Streamer process","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: end an instance. the object should no longer be used after calling this function — extractstreamerExit","text":"Nothing","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExtractTo.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: extract to external file — extractstreamerExtractTo","title":"extract streamer: extract to external file — extractstreamerExtractTo","text":"extract streamer: extract external file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExtractTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: extract to external file — extractstreamerExtractTo","text":"","code":"extractstreamerExtractTo(p, fname, outpath)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExtractTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: extract to external file — extractstreamerExtractTo","text":"p Streamer process fname Name file verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerExtractTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: extract to external file — extractstreamerExtractTo","text":"0 ok","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerListCellsAnyFile.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: list all cells in a given file — extractstreamerListCellsAnyFile","title":"extract streamer: list all cells in a given file — extractstreamerListCellsAnyFile","text":"extract streamer: list cells given file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerListCellsAnyFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: list all cells in a given file — extractstreamerListCellsAnyFile","text":"","code":"extractstreamerListCellsAnyFile(p, fname, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerListCellsAnyFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: list all cells in a given file — extractstreamerListCellsAnyFile","text":"p Streamer process fname Name file verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerListCellsAnyFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: list all cells in a given file — extractstreamerListCellsAnyFile","text":"List cells","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerLs.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: list all files in current Bascet zip-file — extractstreamerLs","title":"extract streamer: list all files in current Bascet zip-file — extractstreamerLs","text":"extract streamer: list files current Bascet zip-file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerLs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: list all files in current Bascet zip-file — extractstreamerLs","text":"","code":"extractstreamerLs(p, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerLs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: list all files in current Bascet zip-file — extractstreamerLs","text":"p Streamer process verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerLs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: list all files in current Bascet zip-file — extractstreamerLs","text":"List files","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerOpen.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: set which file is open — extractstreamerOpen","title":"extract streamer: set which file is open — extractstreamerOpen","text":"extract streamer: set file open","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerOpen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: set which file is open — extractstreamerOpen","text":"","code":"extractstreamerOpen(p, fname, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerOpen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: set which file is open — extractstreamerOpen","text":"p Streamer process fname Name file verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerOpen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: set which file is open — extractstreamerOpen","text":"0 ok","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadNLines.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: helper function to read N lines — extractstreamerReadNLines","title":"extract streamer: helper function to read N lines — extractstreamerReadNLines","text":"extract streamer: helper function read N lines","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadNLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: helper function to read N lines — extractstreamerReadNLines","text":"","code":"extractstreamerReadNLines(p, n_lines, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadNLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: helper function to read N lines — extractstreamerReadNLines","text":"p Streamer process verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadNLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: helper function to read N lines — extractstreamerReadNLines","text":"lines","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadOneLine.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: helper function to read one line — extractstreamerReadOneLine","title":"extract streamer: helper function to read one line — extractstreamerReadOneLine","text":"extract streamer: helper function read one line","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadOneLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: helper function to read one line — extractstreamerReadOneLine","text":"","code":"extractstreamerReadOneLine(p, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadOneLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: helper function to read one line — extractstreamerReadOneLine","text":"p Streamer process verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerReadOneLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: helper function to read one line — extractstreamerReadOneLine","text":"line read","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerShowtext.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: get content of file, assumed to be text (or this function crashes) — extractstreamerShowtext","title":"extract streamer: get content of file, assumed to be text (or this function crashes) — extractstreamerShowtext","text":"extract streamer: get content file, assumed text (function crashes)","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerShowtext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: get content of file, assumed to be text (or this function crashes) — extractstreamerShowtext","text":"","code":"extractstreamerShowtext(p, fname, verbose = FALSE)"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerShowtext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: get content of file, assumed to be text (or this function crashes) — extractstreamerShowtext","text":"p Streamer process fname Name file verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerShowtext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: get content of file, assumed to be text (or this function crashes) — extractstreamerShowtext","text":"text, divided line","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerStart.html","id":null,"dir":"Reference","previous_headings":"","what":"extract streamer: create an instance — extractstreamerStart","title":"extract streamer: create an instance — extractstreamerStart","text":"extract streamer: create instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerStart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract streamer: create an instance — extractstreamerStart","text":"","code":"extractstreamerStart(   fname = NULL,   verbose = FALSE,   bascetInstance = GetDefaultBascetInstance() )"},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerStart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract streamer: create an instance — extractstreamerStart","text":"fname File stream (can NULL set later) verbose Print additional information, primarily help troubleshooting bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/extractstreamerStart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract streamer: create an instance — extractstreamerStart","text":"process","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetDockerImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and install a Bascet docker image. It will be cached to avoid downloading it each the time the function is called — getBascetDockerImage","title":"Get and install a Bascet docker image. It will be cached to avoid downloading it each the time the function is called — getBascetDockerImage","text":"Get install Bascet docker image. cached avoid downloading time function called","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetDockerImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and install a Bascet docker image. It will be cached to avoid downloading it each the time the function is called — getBascetDockerImage","text":"","code":"getBascetDockerImage(   storeAt = getwd(),   tempdir = NULL,   forceInstall = FALSE,   verbose = FALSE )"},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetDockerImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and install a Bascet docker image. It will be cached to avoid downloading it each the time the function is called — getBascetDockerImage","text":"storeAt Directory store container . Default current directory likely better provide single systems level directory tempdir Default create directory temporary files current directory. Place fast disk possible forceInstall Set true overwrite existing Docker image verbose Print additional information, primarily help troubleshooting","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetDockerImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and install a Bascet docker image. It will be cached to avoid downloading it each the time the function is called — getBascetDockerImage","text":"Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetSingularityImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Bascet image (singularity or docker). It will be cached in the provided directory to avoid downloading it each the time the function is called — getBascetSingularityImage","title":"Get a Bascet image (singularity or docker). It will be cached in the provided directory to avoid downloading it each the time the function is called — getBascetSingularityImage","text":"Get Bascet image (singularity docker). cached provided directory avoid downloading time function called","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetSingularityImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Bascet image (singularity or docker). It will be cached in the provided directory to avoid downloading it each the time the function is called — getBascetSingularityImage","text":"","code":"getBascetSingularityImage(storeAt = getwd(), tempdir = NULL)"},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetSingularityImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Bascet image (singularity or docker). It will be cached in the provided directory to avoid downloading it each the time the function is called — getBascetSingularityImage","text":"storeAt Directory store container . Default current directory likely better provide single systems level directory tempdir Default create directory temporary files current directory. Place fast disk possible","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getBascetSingularityImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Bascet image (singularity or docker). It will be cached in the provided directory to avoid downloading it each the time the function is called — getBascetSingularityImage","text":"Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getFastqR2fromR1.html","id":null,"dir":"Reference","previous_headings":"","what":"Get corresponding R2 file. Assumes that the input file is R1 — getFastqR2fromR1","title":"Get corresponding R2 file. Assumes that the input file is R1 — getFastqR2fromR1","text":"Get corresponding R2 file. Assumes input file R1","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getFastqR2fromR1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get corresponding R2 file. Assumes that the input file is R1 — getFastqR2fromR1","text":"","code":"getFastqR2fromR1(fname)"},{"path":"https://henriksson-lab.github.io/zorn/reference/getFastqR2fromR1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get corresponding R2 file. Assumes that the input file is R1 — getFastqR2fromR1","text":"fname Path file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/getFastqR2fromR1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get corresponding R2 file. Assumes that the input file is R1 — getFastqR2fromR1","text":"Path R2 file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isBamPairedAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Figure out if a BAM-file is a paired alignment or not — isBamPairedAlignment","title":"Figure out if a BAM-file is a paired alignment or not — isBamPairedAlignment","text":"Figure BAM-file paired alignment ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isBamPairedAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Figure out if a BAM-file is a paired alignment or not — isBamPairedAlignment","text":"","code":"isBamPairedAlignment(fname, bascetInstance = GetDefaultBascetInstance())"},{"path":"https://henriksson-lab.github.io/zorn/reference/isBamPairedAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Figure out if a BAM-file is a paired alignment or not — isBamPairedAlignment","text":"fname Name BAM-file bascetInstance Bascet instance","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isBamPairedAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Figure out if a BAM-file is a paired alignment or not — isBamPairedAlignment","text":"TRUE BAM-file paired alignment","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isFastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file is a FASTQ file — isFastq","title":"Check if a file is a FASTQ file — isFastq","text":"Check file FASTQ file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isFastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file is a FASTQ file — isFastq","text":"","code":"isFastq(fname)"},{"path":"https://henriksson-lab.github.io/zorn/reference/isFastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file is a FASTQ file — isFastq","text":"fname Path file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isFastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a file is a FASTQ file — isFastq","text":"TRUE file type FASTQ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isPairedFastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file is a paired FASTQ file. Panics if the file is not a FASTQ at all — isPairedFastq","title":"Check if a file is a paired FASTQ file. Panics if the file is not a FASTQ at all — isPairedFastq","text":"Check file paired FASTQ file. Panics file FASTQ ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isPairedFastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file is a paired FASTQ file. Panics if the file is not a FASTQ at all — isPairedFastq","text":"","code":"isPairedFastq(fname)"},{"path":"https://henriksson-lab.github.io/zorn/reference/isPairedFastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file is a paired FASTQ file. Panics if the file is not a FASTQ at all — isPairedFastq","text":"fname Path file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/isPairedFastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a file is a paired FASTQ file. Panics if the file is not a FASTQ at all — isPairedFastq","text":"TRUE file paired FASTQ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/lseq.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithmic spaced sequence; taken from emdbook library — lseq","title":"logarithmic spaced sequence; taken from emdbook library — lseq","text":"logarithmic spaced sequence; taken emdbook library","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/lseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithmic spaced sequence; taken from emdbook library — lseq","text":"","code":"lseq(from = 1, to = 1e+05, length.out = 6)"},{"path":"https://henriksson-lab.github.io/zorn/reference/lseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithmic spaced sequence; taken from emdbook library — lseq","text":"First value Last value length.Length list","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/lseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithmic spaced sequence; taken from emdbook library — lseq","text":"List values","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/makeOutputShardNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Generate suitable output filenames according to shard system i.e. root/name.##.ext — makeOutputShardNames","title":"Helper function: Generate suitable output filenames according to shard system i.e. root/name.##.ext — makeOutputShardNames","text":"Helper function: Generate suitable output filenames according shard system .e. root/name.##.ext","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/makeOutputShardNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Generate suitable output filenames according to shard system i.e. root/name.##.ext — makeOutputShardNames","text":"","code":"makeOutputShardNames(bascetRoot, outputName, ext, num_shards)"},{"path":"https://henriksson-lab.github.io/zorn/reference/makeOutputShardNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: Generate suitable output filenames according to shard system i.e. root/name.##.ext — makeOutputShardNames","text":"bascetRoot root folder Bascets stored outputName Name output shard ext File extension, including . num_shards Number output shards","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/makeOutputShardNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Generate suitable output filenames according to shard system i.e. root/name.##.ext — makeOutputShardNames","text":"List files write shards ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/new_no_job.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty job. It is considered to have terminated from the start — new_no_job","title":"Create an empty job. It is considered to have terminated from the start — new_no_job","text":"Create empty job. considered terminated start","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/new_no_job.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty job. It is considered to have terminated from the start — new_no_job","text":"","code":"new_no_job()"},{"path":"https://henriksson-lab.github.io/zorn/reference/new_no_job.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty job. It is considered to have terminated from the start — new_no_job","text":"-job","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/removeBascetDockerImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove current Bascet docker image — removeBascetDockerImage","title":"Remove current Bascet docker image — removeBascetDockerImage","text":"Remove current Bascet docker image","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/removeBascetDockerImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove current Bascet docker image — removeBascetDockerImage","text":"","code":"removeBascetDockerImage()"},{"path":"https://henriksson-lab.github.io/zorn/reference/safeDownloadMD5.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file, check MD5 to ensure success. This assumes a file.md5 is stored on the server — safeDownloadMD5","title":"Download a file, check MD5 to ensure success. This assumes a file.md5 is stored on the server — safeDownloadMD5","text":"Download file, check MD5 ensure success. assumes file.md5 stored server","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/safeDownloadMD5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file, check MD5 to ensure success. This assumes a file.md5 is stored on the server — safeDownloadMD5","text":"","code":"safeDownloadMD5(url, file)"},{"path":"https://henriksson-lab.github.io/zorn/reference/safeDownloadMD5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file, check MD5 to ensure success. This assumes a file.md5 is stored on the server — safeDownloadMD5","text":"url URL file download file Name file download content ","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/safeDownloadMD5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file, check MD5 to ensure success. This assumes a file.md5 is stored on the server — safeDownloadMD5","text":"Nothing; panics download fails","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptCancelJobIfFileExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a piece of script to exit a job early if file exists — shellscriptCancelJobIfFileExists","title":"Create a piece of script to exit a job early if file exists — shellscriptCancelJobIfFileExists","text":"Create piece script exit job early file exists","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptCancelJobIfFileExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a piece of script to exit a job early if file exists — shellscriptCancelJobIfFileExists","text":"","code":"shellscriptCancelJobIfFileExists(fvar)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptCancelJobIfFileExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a piece of script to exit a job early if file exists — shellscriptCancelJobIfFileExists","text":"fvar Name file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptCancelJobIfFileExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a piece of script to exit a job early if file exists — shellscriptCancelJobIfFileExists","text":"BASH script content","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeBashArray.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: Create array of values in bash scripts example: myArray=(","title":"Helper function: Create array of values in bash scripts example: myArray=(","text":"Helper function: Create array values bash scripts example: myArray=(\"cat\" \"dog\" \"mouse\" \"frog\")","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeBashArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: Create array of values in bash scripts example: myArray=(","text":"","code":"shellscriptMakeBashArray(variable, vals)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeBashArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: Create array of values in bash scripts example: myArray=(","text":"variable Environment variable store list vals Array strings store environment variable","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeBashArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: Create array of values in bash scripts example: myArray=(","text":"string similar : myArray=(\"cat\" \"dog\" \"mouse\" \"frog\")","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeCommalist.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function, taking a list of elements such as a,b, and returning ","title":"Helper function, taking a list of elements such as a,b, and returning ","text":"Helper function, taking list elements ,b, returning \",b\"","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeCommalist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function, taking a list of elements such as a,b, and returning ","text":"","code":"shellscriptMakeCommalist(f)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeCommalist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function, taking a list of elements such as a,b, and returning ","text":"f List elements","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeCommalist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function, taking a list of elements such as a,b, and returning ","text":"Formatted list","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeFilesExpander.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","title":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","text":"name file VARIABLETASK_ID TASK_ID starts 0","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeFilesExpander.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","text":"","code":"shellscriptMakeFilesExpander(for_variable, list_content)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeFilesExpander.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","text":"for_variable Environment variable array files content list_content Content file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeFilesExpander.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","text":"Part shell script","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeFilesExpander.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a shell script command to produce a file of list of strings — shellscriptMakeFilesExpander","text":"Note must one file per task, task deletes file. result race conditions","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeOneFileExpander.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that takes content of a list and generates a BASH script that stores the content in a temporary file during execution — shellscriptMakeOneFileExpander","title":"Helper function that takes content of a list and generates a BASH script that stores the content in a temporary file during execution — shellscriptMakeOneFileExpander","text":"Helper function takes content list generates BASH script stores content temporary file execution","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeOneFileExpander.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that takes content of a list and generates a BASH script that stores the content in a temporary file during execution — shellscriptMakeOneFileExpander","text":"","code":"shellscriptMakeOneFileExpander(tmpname, list_lines)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeOneFileExpander.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that takes content of a list and generates a BASH script that stores the content in a temporary file during execution — shellscriptMakeOneFileExpander","text":"tmpname Name environment variable name file stored list_lines Content write file","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptMakeOneFileExpander.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that takes content of a list and generates a BASH script that stores the content in a temporary file during execution — shellscriptMakeOneFileExpander","text":"BASH script content expander","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptSplitArrayIntoListRandomly.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to take an array of elements and split it randomly into a number of subset lists — shellscriptSplitArrayIntoListRandomly","title":"Helper function to take an array of elements and split it randomly into a number of subset lists — shellscriptSplitArrayIntoListRandomly","text":"Helper function take array elements split randomly number subset lists","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptSplitArrayIntoListRandomly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to take an array of elements and split it randomly into a number of subset lists — shellscriptSplitArrayIntoListRandomly","text":"","code":"shellscriptSplitArrayIntoListRandomly(arr, num_divide)"},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptSplitArrayIntoListRandomly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to take an array of elements and split it randomly into a number of subset lists — shellscriptSplitArrayIntoListRandomly","text":"arr Array elements subdivide num_divide Number subdivions","code":""},{"path":"https://henriksson-lab.github.io/zorn/reference/shellscriptSplitArrayIntoListRandomly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to take an array of elements and split it randomly into a number of subset lists — shellscriptSplitArrayIntoListRandomly","text":"List arrays","code":""}]
